# -*- coding: utf-8 -*-
"""coding question practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bJ7IwBNQnitlmFYeQ7Hhz2YaeEomXvVq
"""

class Solution:
    def climbStairs(self, n):
        if n == 1:
            return 1
        elif n == 2:
            return 2

        dp = [0] * (n + 1)
        dp[1] = 1
        dp[2] = 2

        for i in range(3, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2]

        return dp[n]

def main():
    n = int(input())
    solver = Solution()
    print(solver.climbStairs(n))

if __name__ == "__main__":
    main()

class Solution:
  def climbStairs(self, n):
    if n == 1:
      return 1
    elif n == 2:
      return 2

    dp = [0] * (n + 1)
    dp[1] = 1
    dp[2] = 3

    for i in range(3, n + 1):
      dp[i] = dp[i - 1] + dp[i - 2]

    return dp[n]

def main():
   n = int(input())
   solver = Solution()
   print(solver.climbStairs(n))

if __name__ == "__main__":
          main()

class Solution:
    def is_leap_year(self, year):
        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
            return True
        else:
            return False

year = int(input("Enter a year: "))

solution_instance = Solution()

if solution_instance.is_leap_year(year):
    print(f"{year} is a leap year.")
else:
    print(f"{year} is not a leap year.")

class Solution:
  def is_leap_year(self, year):
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
      return True
    else:
      return False

year = int(input("Enter a year: "))

solution_instance = Solution()

if solution_instance.is_leap_year(year):
  print(f"{year} is a leap year.")
else:
  print(f"{year} is not a leap year.")

import math

class Solution:
  def is_prime(self, N):
    if N <= 1:
      return 0

    for i in range(2, int(math.sqrt(N)) + 1):
      if N % i == 0:
        return 0

    return 1

N = int(input("Enter a number: "))

solution_instance = Solution()

result = solution_instance.is_prime(N)
print(result)

import math

class Solution:
  def is_prime(self, N):
    if N <= 1:
      return 0

    for i in range(2, int(math.sqrt(N)) + 1):
      if N % i == 0:
        return 0

    return 1

N = int(input("Enter a number: "))

solution_instance = Solution()

result = solution_instance.is_prime(N)
print(result)

class Solution:
    def analyze_number(self, n):
        result = []


        if n > 0:
            result.append(f"Positive number{n}")
        elif n < 0:
            result.append(f"Negative number{n}")
        else:
            result.append(f"{n} is Zero")

        if n % 2 == 0:
            result.append("is Even")
        else:
            result.append("is Odd")

        return ' '.join(result)

n = int(input("Enter a number: "))


solution_instance = Solution()


result = solution_instance.analyze_number(n)
print(result)

class Solution:
  def analyze_number(self, n):
    result = []

    if n > 0:
      result.append(f"Positive number{n}")

    elif n < 0:
       result.append(f"negative number{n}")

    else:
        result.append(f"{n} is Zero")


    if n % 2 == 0:
      result.append("is Even")

    else:
      result.append("is Odd")

    return ' '.join(result)

n = int(input("Enter a number: "))
solution_instance = Solution()
result = solution_instance.analyze_number(n)
print(result)

class Solution:
  def analyze_number(self, n):
    result = []

    if n > 0:
       result.append(f"Positive number{n}")
    elif n < 0:
      result.append(f"Negative number{n}")
    else:
      result.append(f"{n} is Zero")
    if n % 2 == 0:
      result.append("is Even")
    else:
      result.append("is Odd")

    return ''.join(result)

n = int(input("Enter a number: "))

solution_instance = Solution()

result = solution_instance.analyze_number(n)
print(result)

class Solution:
  def print_divisors(self, num):
    divisors = []
    for i in range(1, int(num**0.5) + 1):
      if num % i == 0:
        divisors.append(i)
        if num // i != i:
          divisors.append(num // i)

    divisors.sort()
    return divisors

n = int(input("Enter a natural number: "))

solution_instance = Solution()

result = solution_instance.print_divisors(n)
print(f"The distinct divisors of {n} are: {''.join(map(str, result))}")

class Solution:
  def print_divisors(self, num):
    divisors = []
    for i in range(1, int(num**0.5) + 1):
      if num % i == 0:
        divisors.append(i)
        if num % i != i:
          divisors.append(num // i)

    divisors.sort()
    return divisors

n = int(input("Enter a natural naumber: "))

solution_instance = Solution()

result = solution_instance.print_divisors(n)
print(f"The distinct divisors of {n} are: {''.join(map(str, result))}")

class Solution:
    def to_hex(self, num):
        # Special case for 0
        if num == 0:
            return "0"

        # Convert negative numbers using two's complement
        if num < 0:
            num += 2**32

        hex_chars = "0123456789abcdef"
        result = ""

        while num > 0:
            # Get the remainder when divided by 16 and append the corresponding hex character
            result = hex_chars[num % 16] + result
            num //= 16

        return f'"{result}"'

# Take input from the user
num = int(input("Enter an integer: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Call the to_hex method and print the result
hex_representation = solution_instance.to_hex(num)
print(f"The hexadecimal representation of {num} is: {hex_representation}")

class Solution:
    def to_hex(self, num):

        if num == 0:
            return "0"


        if num < 0:
            num += 2**32

        hex_chars = "0123456789abcdef"
        result = ""

        while num > 0:

            result = hex_chars[num % 16] + result
            num //= 16

        return f'"{result}"'


num = int(input("Enter an integer: "))


solution_instance = Solution()


hex_representation = solution_instance.to_hex(num)
print(f"The hexadecimal representation of {num} is: {hex_representation}")