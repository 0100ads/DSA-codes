# -*- coding: utf-8 -*-
"""PLACEMENT NEW SHEET.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cu55ZOZWehlBqhxCnm9RAMfKLqmRfybK

1-You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?



Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step


Constraints:

1 <= n <= 45
"""

def climbStairs(n):
    if n == 1:
        return 1
    if n == 2:
        return 2

    # Initialize an array to store the number of ways to reach each step
    dp = [0] * (n + 1)
    dp[1] = 1
    dp[2] = 2

    # Use dynamic programming to calculate the number of ways for each step
    for i in range(3, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]

    return dp[n]

# Take input from the user
n = int(input("Enter the number of steps: "))

# Call the function and print the result
result = climbStairs(n)
print(f"There are {result} distinct ways to climb to the top.")

class Solution:
    def climbStairs(self, n):
        if n == 1:
            return 1
        if n == 2:
            return 2

        # Initialize an array to store the number of ways to reach each step
        dp = [0] * (n + 1)
        dp[1] = 1
        dp[2] = 2

        # Use dynamic programming to calculate the number of ways for each step
        for i in range(3, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2]

        return dp[n]

# Take input from the user
n = int(input("Enter the number of steps: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Call the climbStairs method and print the result
result = solution_instance.climbStairs(n)
print(f"There are {result} distinct ways to climb to the top.")

"""2-Program to check if a given year is leap year"""

def is_leap_year(year):
    # Leap year conditions
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        return True
    else:
        return False

# Take input from the user
year = int(input("Enter a year: "))

# Check if the entered year is a leap year and print the result
if is_leap_year(year):
    print(f"{year} is a leap year.")
else:
    print(f"{year} is not a leap year.")

def is_leap_year(year):
    # Leap year conditions
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        return 1  # Return 1 for a leap year
    else:
        return 0  # Return 0 for a non-leap year

# Take input from the user
year = int(input("Enter a year: "))

# Check if the entered year is a leap year and print the result
result = is_leap_year(year)
print(result)

class Solution:
    def is_leap_year(self, year):
        # Leap year conditions
        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
            return True
        else:
            return False

# Take input from the user
year = int(input("Enter a year: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Check if the entered year is a leap year and print the result
if solution_instance.is_leap_year(year):
    print(f"{year} is a leap year.")
else:
    print(f"{year} is not a leap year.")

class Solution:
    def is_leap_year(self, year):
        # Leap year conditions
        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
            return 1  # Return 1 for a leap year
        else:
            return 0  # Return 0 for a non-leap year

# Take input from the user
year = int(input("Enter a year: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Call the is_leap_year method and print the result
result = solution_instance.is_leap_year(year)
print(result)

"""3-For a given number N check if it is prime or not. A prime number is a number which is only divisible by 1 and itself.


Example 1:

Input:
N = 5
Output:
1
Explanation:
5 has 2 factors 1 and 5 only.
Example 2:

Input:
N = 25
Output:
0
Explanation:
25 has 3 factors 1, 5, 25.
Expected Time Complexity: O(sqrt(N))
Expected Space Complexity: O(1)


Constraints:
1 <= N <= 109
"""

import math

def is_prime(N):
    if N <= 1:
        return 0  # N is not prime if it is less than or equal to 1

    # Check for factors up to the square root of N
    for i in range(2, int(math.sqrt(N)) + 1):
        if N % i == 0:
            return 0  # N is not prime if it has a factor other than 1 and itself

    return 1  # N is prime

# Take input from the user
N = int(input("Enter a number: "))

# Check if the entered number is prime and print the result
result = is_prime(N)
print(result)

import math

class Solution:
    def is_prime(self, N):
        if N <= 1:
            return 0  # N is not prime if it is less than or equal to 1

        # Check for factors up to the square root of N
        for i in range(2, int(math.sqrt(N)) + 1):
            if N % i == 0:
                return 0  # N is not prime if it has a factor other than 1 and itself

        return 1  # N is prime

# Take input from the user
N = int(input("Enter a number: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Check if the entered number is prime and print the result
result = solution_instance.is_prime(N)
print(result)

"""4-Program to check if a number is Positive, Negative, Odd, Even, Zero"""

def analyze_number(n):
    result = []

    # Check if the number is positive, negative, odd, even, or zero
    if n > 0:
        result.append(f"Positive number{n}")
    elif n < 0:
        result.append(f"Negative number{n}")
    else:
        result.append(f"{n} is Zero")

    if n % 2 == 0:
        result.append("is Even")
    else:
        result.append("is Odd")

    return ' '.join(result)

# Take input from the user
n = int(input("Enter a number: "))

# Call the analyze_number function and print the result
result = analyze_number(n)
print(result)

class Solution:
    def analyze_number(self, n):
        result = []

        # Check if the number is positive, negative, odd, even, or zero
        if n > 0:
            result.append(f"Positive number{n}")
        elif n < 0:
            result.append(f"Negative number{n}")
        else:
            result.append(f"{n} is Zero")

        if n % 2 == 0:
            result.append("is Even")
        else:
            result.append("is Odd")

        return ' '.join(result)

# Take input from the user
n = int(input("Enter a number: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Call the analyze_number method and print the result
result = solution_instance.analyze_number(n)
print(result)

"""5-Given a natural number n, print all distinct divisors of it."""

# Take input from the user
n = int(input("Enter a natural number: "))

# Function to print distinct divisors of a number
def print_divisors(num):
    divisors = []
    for i in range(1, int(num**0.5) + 1):
        if num % i == 0:
            divisors.append(i)
            # If the divisors are distinct, add the other divisor as well
            if num // i != i:
                divisors.append(num // i)

    divisors.sort()  # Sort the divisors for better readability
    return divisors

# Print distinct divisors of the given number
result = print_divisors(n)
print(f"The distinct divisors of {n} are: {' '.join(map(str, result))}")

class Solution:
    def print_divisors(self, num):
        divisors = []
        for i in range(1, int(num**0.5) + 1):
            if num % i == 0:
                divisors.append(i)
                # If the divisors are distinct, add the other divisor as well
                if num // i != i:
                    divisors.append(num // i)

        divisors.sort()  # Sort the divisors for better readability
        return divisors

# Take input from the user
n = int(input("Enter a natural number: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Call the print_divisors method and print the result
result = solution_instance.print_divisors(n)
print(f"The distinct divisors of {n} are: {' '.join(map(str, result))}")

"""6-Given an integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used.

All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.

Note: You are not allowed to use any built-in library method to directly solve this problem.



Example 1:

Input: num = 26
Output: "1a"
Example 2:

Input: num = -1
Output: "ffffffff"


Constraints:

-231 <= num <= 231 - 1
"""

def to_hex(num):
    # Special case for 0
    if num == 0:
        return "0"

    # Convert negative numbers using two's complement
    if num < 0:
        num += 2**32

    hex_chars = "0123456789abcdef"
    result = ""

    while num > 0:
        # Get the remainder when divided by 16 and append the corresponding hex character
        result = hex_chars[num % 16] + result
        num //= 16

    return f'"{result}"'

# Take input from the user
num = int(input("Enter an integer: "))

# Get the hexadecimal representation and print the result
hex_representation = to_hex(num)
print(f"The hexadecimal representation of {num} is: {hex_representation}")

class Solution:
    def to_hex(self, num):
        # Special case for 0
        if num == 0:
            return "0"

        # Convert negative numbers using two's complement
        if num < 0:
            num += 2**32

        hex_chars = "0123456789abcdef"
        result = ""

        while num > 0:
            # Get the remainder when divided by 16 and append the corresponding hex character
            result = hex_chars[num % 16] + result
            num //= 16

        return f'"{result}"'

# Take input from the user
num = int(input("Enter an integer: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Call the to_hex method and print the result
hex_representation = solution_instance.to_hex(num)
print(f"The hexadecimal representation of {num} is: {hex_representation}")

"""7-Given a positive integer num, return true if num is a perfect square or false otherwise.

A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.

You must not use any built-in library function, such as sqrt.



Example 1:

Input: num = 16
Output: true
Explanation: We return true because 4 * 4 = 16 and 4 is an integer.
Example 2:

Input: num = 14
Output: false
Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.


Constraints:

1 <= num <= 231 - 1
"""

true = True
false = False

def isPerfectSquare(num):
    if num < 1:
        return false

    # Binary search for finding the square root
    left, right = 1, num
    while left <= right:
        mid = left + (right - left) // 2
        square = mid * mid

        if square == num:
            return true
        elif square < num:
            left = mid + 1
        else:
            right = mid - 1

    return false

# Take input from the user
num = int(input("Enter a positive integer: "))

# Check if the entered number is a perfect square and print the result
result = isPerfectSquare(num)
print(f"{num} is a perfect square: {result}")

class Solution:
    def isPerfectSquare(self, num):
        true = True
        false = False

        if num < 1:
            return false

        # Binary search for finding the square root
        left, right = 1, num
        while left <= right:
            mid = left + (right - left) // 2
            square = mid * mid

            if square == num:
                return true
            elif square < num:
                left = mid + 1
            else:
                right = mid - 1

        return false

# Take input from the user
num = int(input("Enter a positive integer: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Call the isPerfectSquare method and print the result
result = solution_instance.isPerfectSquare(num)
print(f"{num} is a perfect square: {result}")

"""8-Add two fraction a/b and c/d and print answer in simplest form.
Examples :


Input:  1/2 + 3/2
Output: 2/1

Input:  1/3 + 3/9
Output: 2/3

Input:  1/5 + 3/15
Output: 2/5
"""

# Function to return gcd of a and b
def gcd(a, b):
    if a == 0:
        return b
    return gcd(b % a, a)

# Function to convert the obtained
# fraction into its simplest form
def lowest(den3, num3):

    # Finding gcd of both terms
    common_factor = gcd(num3, den3)

    # Converting both terms
    # into simpler terms by
    # dividing them by common factor
    den3 = int(den3 / common_factor)
    num3 = int(num3 / common_factor)
    return num3, den3

# Function to add two fractions
def addFraction(num1, den1, num2, den2):

    # Finding gcd of den1 and den2
    den3 = gcd(den1, den2)

    # Denominator of the final
    # fraction obtained finding
    # LCM of den1 and den2
    # LCM * GCD = a * b
    den3 = int((den1 * den2) / den3)

    # Changing the fractions to
    # have the same denominator Numerator
    # of the final fraction obtained
    num3 = int((num1 * (den3 / den1)) +
               (num2 * (den3 / den2)))

    # Calling function to convert
    # the final fraction into its
    # simplest form
    return lowest(den3, num3)

# Take input from the user
fraction_str1 = input("Enter the first fraction in the format 'numerator/denominator': ")
numerator1, denominator1 = map(int, fraction_str1.split('/'))

fraction_str2 = input("Enter the second fraction in the format 'numerator/denominator': ")
numerator2, denominator2 = map(int, fraction_str2.split('/'))

# Add the fractions and print the result in simplest form
print(f"{numerator1}/{denominator1} + {numerator2}/{denominator2} is equal to ", end="")
result_numerator, result_denominator = addFraction(numerator1, denominator1, numerator2, denominator2)
print(f"{result_numerator}/{result_denominator}")

class Solution:
    def gcd(self, a, b):
        if a == 0:
            return b
        return self.gcd(b % a, a)

    def lowest(self, den3, num3):
        common_factor = self.gcd(num3, den3)
        den3 = int(den3 / common_factor)
        num3 = int(num3 / common_factor)
        return num3, den3

    def addFraction(self, num1, den1, num2, den2):
        den3 = self.gcd(den1, den2)
        den3 = int((den1 * den2) / den3)
        num3 = int((num1 * (den3 / den1)) + (num2 * (den3 / den2)))
        return self.lowest(den3, num3)

# Take input from the user
fraction_str1 = input("Enter the first fraction in the format 'numerator/denominator': ")
numerator1, denominator1 = map(int, fraction_str1.split('/'))

fraction_str2 = input("Enter the second fraction in the format 'numerator/denominator': ")
numerator2, denominator2 = map(int, fraction_str2.split('/'))

# Create an instance of the Solution class
solution_instance = Solution()

# Add the fractions and print the result in simplest form
print(f"{numerator1}/{denominator1} + {numerator2}/{denominator2} is equal to ", end="")
result_numerator, result_denominator = solution_instance.addFraction(numerator1, denominator1, numerator2, denominator2)
print(f"{result_numerator}/{result_denominator}")

"""9-Given a number n, print n-th Fibonacci Number.

The Fibonacci numbers are the numbers in the following integer sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..



Examples:

Input  : n = 1

Output : 1

Input  : n = 9

Output : 34

Input  : n = 10

Output : 55
"""

# Function to find the nth Fibonacci number
def fibonacci(n):
    if n <= 0:
        return "Invalid input. Please enter a positive integer for n."

    fib_series = [0, 1]
    for i in range(2, n+1):
        fib_series.append(fib_series[-1] + fib_series[-2])

    return fib_series[n]

# Take input from the user
n = int(input("Enter the value of n: "))

# Print the nth Fibonacci number
result = fibonacci(n)
print(f"The {n}-th Fibonacci number is: {result}")

class Solution:
    def fibonacci(self, n):
        if n <= 0:
            return "Invalid input. Please enter a positive integer for n."

        fib_series = [0, 1]
        for i in range(2, n + 1):
            fib_series.append(fib_series[-1] + fib_series[-2])

        return fib_series[n]

# Take input from the user
n = int(input("Enter the value of n: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Print the nth Fibonacci number
result = solution_instance.fibonacci(n)
print(f"The {n}-th Fibonacci number is: {result}")

"""10-GCD OF TWO NUMBERS"""

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Take input from the user
A = int(input("Enter the first positive integer (A): "))
B = int(input("Enter the second positive integer (B): "))

# Calculate and print the GCD
result = gcd(A, B)
print(f"The GCD of {A} and {B} is: {result}")

class Solution:
    def gcd(self, a, b):
        while b:
            a, b = b, a % b
        return a

# Take input from the user
A = int(input("Enter the first positive integer (A): "))
B = int(input("Enter the second positive integer (B): "))

# Create an instance of the Solution class
solution_instance = Solution()

# Calculate and print the GCD
result = solution_instance.gcd(A, B)
print(f"The GCD of {A} and {B} is: {result}")

"""11-Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.



Example 1:

Input: num = 38
Output: 2
Explanation: The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2
Since 2 has only one digit, return it.
Example 2:

Input: num = 0
Output: 0


Constraints:

0 <= num <= 231 - 1

"""

def add_digits(num):
    while num >= 10:
        num = sum(map(int, str(num)))
    return num

# Take input from the user
num = int(input("Enter a non-negative integer: "))

# Calculate and print the result
result = add_digits(num)
print(f"The result after repeatedly adding digits is: {result}")

class Solution:
    def add_digits(self, num):
        while num >= 10:
            num = sum(map(int, str(num)))
        return num

# Take input from the user
num = int(input("Enter a non-negative integer: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Calculate and print the result
result = solution_instance.add_digits(num)
print(f"The result after repeatedly adding digits is: {result}")

"""12-Given an integer as input and replace all the ‘0’ with ‘5’ in the integer.

Examples:

Input: 102
Output: 152
Explanation: All the digits which are '0' is replaced by '5'

Input: 1020
Output: 1525
Explanation: All the digits which are '0' is replaced by '5'
The use of an array to store all digits is not allowed.
"""

def replace_zeros_with_fives(number):
    # Convert the number to a list of digits
    digits = list(str(number))

    # Replace '0' with '5' in the list
    for i in range(len(digits)):
        if digits[i] == '0':
            digits[i] = '5'

    # Convert the list back to an integer
    result = int("".join(digits))
    return result

# Take input from the user
input_number = int(input("Enter an integer: "))

# Replace '0' with '5' and print the result
result_number = replace_zeros_with_fives(input_number)
print(f"The result after replacing '0' with '5' is: {result_number}")

class Solution:
    def replace_zeros_with_fives(self, number):
        # Convert the number to a list of digits
        digits = list(str(number))

        # Replace '0' with '5' in the list
        for i in range(len(digits)):
            if digits[i] == '0':
                digits[i] = '5'

        # Convert the list back to an integer
        result = int("".join(digits))
        return result

# Take input from the user
input_number = int(input("Enter an integer: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Replace '0' with '5' and print the result
result_number = solution_instance.replace_zeros_with_fives(input_number)
print(f"The result after replacing '0' with '5' is: {result_number}")

"""13-A number is a perfect number if is equal to sum of its proper divisors, that is, sum of its positive divisors excluding the number itself. Write a function to check if a given number is perfect or not.
Examples:

Input: n = 15
Output: false
Divisors of 15 are 1, 3 and 5. Sum of
divisors is 9 which is not equal to 15.

Input: n = 6
Output: true
Divisors of 6 are 1, 2 and 3. Sum of
divisors is 6.
"""

def is_perfect_number(num):
    if num <= 0:
        return False

    # Find the divisors of the number and calculate their sum
    sum_of_divisors = sum([i for i in range(1, num) if num % i == 0])

    # Check if the sum of divisors is equal to the number
    return sum_of_divisors == num

# Take input from the user
number = int(input("Enter a positive integer: "))

# Check if the number is a perfect number and print the result
result = is_perfect_number(number)
print(f"{number} is a perfect number: {result}")

class Solution:
    def is_perfect_number(self, num):
        if num <= 0:
            return False

        # Find the divisors of the number and calculate their sum
        sum_of_divisors = sum([i for i in range(1, num) if num % i == 0])

        # Check if the sum of divisors is equal to the number
        return sum_of_divisors == num

# Take input from the user
number = int(input("Enter a positive integer: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Check if the number is a perfect number and print the result
result = solution_instance.is_perfect_number(number)
print(f"{number} is a perfect number: {result}")

"""14-Given a number x, determine whether the given number is Armstrong’s number or not.

A positive integer of n digits is called an Armstrong number of order n (order is the number of digits) if

abcd... = pow(a,n) + pow(b,n) + pow(c,n) + pow(d,n) + ....
Example:

Input:153
Output: Yes
153 is an Armstrong number.
1*1*1 + 5*5*5 + 3*3*3 = 153


Input: 120
Output: No
120 is not a Armstrong number.
1*1*1 + 2*2*2 + 0*0*0 = 9

Input: 1253
Output: No
1253 is not a Armstrong Number
1*1*1*1 + 2*2*2*2 + 5*5*5*5 + 3*3*3*3 = 723

Input: 1634
Output: Yes
1*1*1*1 + 6*6*6*6 + 3*3*3*3 + 4*4*4*4 = 1634
"""

def is_armstrong_number(num):
    if not (100 <= num <= 999):
        return "No"

    # Calculate the sum of cubes of digits
    sum_of_cubes = sum(int(digit) ** 3 for digit in str(num))

    # Check if the sum is equal to the original number
    return "Yes" if sum_of_cubes == num else "No"

# Take input from the user
number = int(input("Enter a 3-digit number: "))

# Check if the number is an Armstrong number and print the result
result = is_armstrong_number(number)
print(f"{number} is an Armstrong number: {result}")

class Solution:
    def is_armstrong_number(self, num):
        if not (100 <= num <= 999):
            return "No"

        # Calculate the sum of cubes of digits
        sum_of_cubes = sum(int(digit) ** 3 for digit in str(num))

        # Check if the sum is equal to the original number
        return "Yes" if sum_of_cubes == num else "No"

# Take input from the user
number = int(input("Enter a 3-digit number: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Check if the number is an Armstrong number and print the result
result = solution_instance.is_armstrong_number(number)
print(f"{number} is an Armstrong number: {result}")

"""15-Given a number n, find the sum of the first natural numbers.




Examples :

Input: n = 3
Output: 6
Explanation:
Note that 1 + 2 + 3 = 6

Input  : 5
Output : 15
Explanation :
Note that 1 + 2 + 3 + 4 + 5 = 15
"""

# Function to calculate the sum of the first n natural numbers
def sum_of_natural_numbers(n):
    return n * (n + 1) // 2

# Take input from the user
n = int(input("Enter a positive integer (n): "))

# Calculate and print the sum of the first n natural numbers
result = sum_of_natural_numbers(n)
print(f"The sum of the first {n} natural numbers is: {result}")

class Solution:
    def sum_of_natural_numbers(self, n):
        return n * (n + 1) // 2

# Take input from the user
n = int(input("Enter a positive integer (n): "))

# Create an instance of the Solution class
solution_instance = Solution()

# Calculate and print the sum of the first n natural numbers
result = solution_instance.sum_of_natural_numbers(n)
print(f"The sum of the first {n} natural numbers is: {result}")

"""16-Given N, the number of persons. The task is to arrange N person around a circular table.
Examples:


Input: N = 4
Output: 6

Input: N = 5
Output: 24
"""

import math

# Function to calculate the factorial of a number
def factorial(n):
    return math.factorial(n)

# Take input from the user
N = int(input("Enter the number of persons (N): "))

# Calculate and print the number of arrangements
arrangements = factorial(N - 1)
print(f"The number of ways to arrange {N} persons around a circular table is: {arrangements}")

import math

class Solution:
    def factorial(self, n):
        return math.factorial(n)

    def number_of_arrangements(self, N):
        return self.factorial(N - 1)

# Take input from the user
N = int(input("Enter the number of persons (N): "))

# Create an instance of the Solution class
solution_instance = Solution()

# Calculate and print the number of arrangements
arrangements = solution_instance.number_of_arrangements(N)
print(f"The number of ways to arrange {N} persons around a circular table is: {arrangements}")

"""17-Given a quadratic equation in the form ax2 + bx + c, (Only the values of a, b and c are provided) the task is to find the roots of the equation.



Examples:

Input:  a = 1, b = -2, c = 1
Output:  Roots are real and same 1


Input  :  a = 1, b = 7, c = 12
Output:  Roots are real and different
-3, -4

Input  :  a = 1, b = 1, c = 1
Output :  Roots are complex
-0.5 + i1.73205, -0.5 – i1.73205  
"""

import cmath  # Importing cmath for handling complex numbers

class Solution:
    def find_roots(self, a, b, c):
        # Check if the quadratic equation is valid
        if a == 0:
            return "Invalid quadratic equation. 'a' cannot be zero."

        # Calculate the discriminant
        delta = b**2 - 4*a*c

        # Check the nature of roots
        if delta > 0:
            # Real and different roots
            root1 = (-b + cmath.sqrt(delta)) / (2*a)
            root2 = (-b - cmath.sqrt(delta)) / (2*a)
            return "Roots are real and different", root1, root2
        elif delta == 0:
            # Real and same roots
            root = -b / (2*a)
            return "Roots are real and same", root
        else:
            # Complex roots
            real_part = -b / (2*a)
            imag_part = cmath.sqrt(abs(delta)) / (2*a)
            root1 = complex(real_part, imag_part)
            root2 = complex(real_part, -imag_part)
            return "Roots are complex", root1, root2

# Take input from the user
a = float(input("Enter the coefficient 'a': "))
b = float(input("Enter the coefficient 'b': "))
c = float(input("Enter the coefficient 'c': "))

# Create an instance of the Solution class
solution_instance = Solution()

# Calculate and print the roots of the quadratic equation
roots_info, *roots = solution_instance.find_roots(a, b, c)

# Print the result
print(f"{roots_info}: {', '.join(map(str, roots))}")

import cmath  # Importing cmath for handling complex numbers

class Solution:
    def find_roots(self, a, b, c):
        # Check if the quadratic equation is valid
        if a == 0:
            return "Invalid quadratic equation. 'a' cannot be zero."

        # Calculate the discriminant
        delta = b**2 - 4*a*c

        # Check the nature of roots
        if delta > 0:
            # Real and different roots
            root1 = (-b + cmath.sqrt(delta)) / (2*a)
            root2 = (-b - cmath.sqrt(delta)) / (2*a)
            return "Roots are real and different", root1, root2
        elif delta == 0:
            # Real and same roots
            root = -b / (2*a)
            return "Roots are real and same", root
        else:
            # Complex roots
            real_part = -b / (2*a)
            imag_part = cmath.sqrt(abs(delta)) / (2*a)
            root1 = complex(real_part, imag_part)
            root2 = complex(real_part, -imag_part)
            return "Roots are complex", root1, root2

# Take input from the user
a = float(input("Enter the coefficient 'a': "))
b = float(input("Enter the coefficient 'b': "))
c = float(input("Enter the coefficient 'c': "))

# Create an instance of the Solution class
solution_instance = Solution()

# Calculate and print the roots of the quadratic equation
roots_info, *roots = solution_instance.find_roots(a, b, c)

# Print the result
print(f"{roots_info}: {', '.join(map(str, roots))}")

"""18-Given an integer array nums, find three numbers whose product is maximum and return the maximum product.



Example 1:

Input: nums = [1,2,3]
Output: 6
Example 2:

Input: nums = [1,2,3,4]
Output: 24
Example 3:

Input: nums = [-1,-2,-3]
Output: -6


Constraints:

3 <= nums.length <= 104
-1000 <= nums[i] <= 1000
"""

def maximum_product(nums):
    nums.sort()
    # Either the product of the three largest numbers or the product of the two smallest and the largest
    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])

# Take input from the user
nums = [int(x) for x in input("Enter integers separated by commas: ").split(',')]

# Check if the input list has at least three elements
if len(nums) < 3:
    print("Please enter at least three integers.")
else:
    # Calculate and print the maximum product of three numbers
    result = maximum_product(nums)
    print(f"The maximum product of three numbers is: {result}")

class Solution:
    def maximum_product(self, nums):
        nums.sort()
        # Either the product of the three largest numbers or the product of the two smallest and the largest
        return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])

# Take input from the user
nums = [int(x) for x in input("Enter integers separated by commas: ").split(',')]

# Create an instance of the Solution class
solution_instance = Solution()

# Check if the input list has at least three elements
if len(nums) < 3:
    print("Please enter at least three integers.")
else:
    # Calculate and print the maximum product of three numbers
    result = solution_instance.maximum_product(nums)
    print(f"The maximum product of three numbers is: {result}")

"""19-Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.



Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false


Constraints:

1 <= n <= 231 - 1
"""

def is_happy_number(n):
    seen = set()

    while n != 1 and n not in seen:
        seen.add(n)
        n = sum(int(digit) ** 2 for digit in str(n))

    return n == 1

# Take input from the user
n = int(input("Enter a positive integer (n): "))

# Check if the number is a happy number and print the result
result = is_happy_number(n)
print(f"{n} is a happy number: {result}")

class Solution:
    def is_happy_number(self, n):
        seen = set()

        while n != 1 and n not in seen:
            seen.add(n)
            n = sum(int(digit) ** 2 for digit in str(n))

        return n == 1

# Take input from the user
n = int(input("Enter a positive integer (n): "))

# Create an instance of the Solution class
solution_instance = Solution()

# Check if the number is a happy number and print the result
result = solution_instance.is_happy_number(n)
print(f"{n} is a happy number: {result}")

"""20-Given a string S, check if it is palindrome or not.

Example 1:

Input: S = "abba"
Output: 1
Explanation: S is a palindrome
Example 2:

Input: S = "abc"
Output: 0
Explanation: S is not a palindrome
"""

def is_palindrome(s):
    s = s.lower()  # Convert to lowercase for case-insensitive comparison
    return 1 if s == s[::-1] else 0

# Take input from the user
input_string = input("Enter a string: ")

# Check if the string is a palindrome and print the result
result = is_palindrome(input_string)
print(result)

class Solution:
    def is_palindrome(self, s):
        s = s.lower()  # Convert to lowercase for case-insensitive comparison
        return 1 if s == s[::-1] else 0

# Take input from the user
input_string = input("Enter a string: ")

# Create an instance of the Solution class
solution_instance = Solution()

# Check if the string is a palindrome and print the result
result = solution_instance.is_palindrome(input_string)
print(result)

"""21-Problem Statement :

An Autobiographical Number is a number N such that the first digit of N represents the count of how many zeroes are there in N, the second digit represents the count of how many ones are there in N and so on.

You are given a function, def FindAutoCount(n):

The function accepts string “n” which is a number and checks whether the number is an autobiographical number or not. If it is, an integer is returned, i.e. the count of distinct numbers in ‘n’. If not, it returns 0.

Assumption:

The input string will not be longer than 10 characters.
Input string will consist of numeric characters.
Note:

If string is None return 0.

Example:

Input:

n: “1210”

Output:

3
"""

def FindAutoCount(n):
    if n is None:
        return 0

    count_digits = [0] * 10

    for digit in n:
        count_digits[int(digit)] += 1

    result_count = 0

    for i, count in enumerate(count_digits):
        if count > 0:
            result_count += 1

    return result_count if result_count > 0 else 0

# Take input from the user
input_number = input("Enter a number: ")

# Call the function and print the result
result = FindAutoCount(input_number)
print(f"The count of distinct numbers in the input is: {result}")

class Solution:
    def find_auto_count(self, n):
        if n is None:
            return 0

        count_digits = [0] * 10

        for digit in n:
            count_digits[int(digit)] += 1

        result_count = 0

        for i, count in enumerate(count_digits):
            if count > 0:
                result_count += 1

        return result_count if result_count > 0 else 0

# Take input from the user
input_number = input("Enter a number: ")

# Create an instance of the Solution class
solution_instance = Solution()

# Call the function and print the result
result = solution_instance.find_auto_count(input_number)
print(f"The count of distinct numbers in the input is: {result}")

"""22-You are given a function, void MaxInArray(int arr[], int length); The function accepts an integer array ‘arr’ of size ‘length’ as its argument. Implement the function to find the maximum element of the array and print the maximum element and its index to the standard output

(STDOUT). The maximum element and its index should be printed in separate lines.

Note:

Array index starts with 0
Maximum element and its index should be separated by a line in the output
Assume there is only 1 maximum element in the array
Print exactly what is asked, do not print any additional greeting messages
Example:

Input:

23 45 82 27 66 12 78 13 71 86

Output:

86

9

Explanation:

86 is the maximum element of the array at index 9.
"""

def MaxInArray(arr, length):
    max_element = arr[0]
    max_index = 0

    for i in range(1, length):
        if arr[i] > max_element:
            max_element = arr[i]
            max_index = i

    print(max_element)
    print(max_index)

# Take input from the user
input_values = input("Enter space-separated integers: ")
arr = list(map(int, input_values.split()))

# Call the function and print the result
MaxInArray(arr, len(arr))

class Solution:
    def max_in_array(self, arr):
        if not arr:
            return None, None

        max_element = arr[0]
        max_index = 0

        for i in range(1, len(arr)):
            if arr[i] > max_element:
                max_element = arr[i]
                max_index = i

        return max_element, max_index

# Take input from the user
input_values = input("Enter space-separated integers: ")
arr = list(map(int, input_values.split()))

# Create an instance of the Solution class
solution_instance = Solution()

# Call the function and print the result
max_element, max_index = solution_instance.max_in_array(arr)
print(f"The maximum element is: {max_element}")
print(f"The index of the maximum element is: {max_index}")

"""23-Problem Statement

You are required to input the size of the matrix then the elements of matrix, then you have to divide the main matrix in two sub matrices (even and odd) in such a way that element at 0 index will be considered as even and element at 1st index will be considered as odd and so on. then you have sort the even and odd matrices in ascending order then print the sum of second largest number from both the matrices

Example

enter the size of array : 5
enter element at 0 index : 3
enter element at 1 index : 4
enter element at 2 index : 1
enter element at 3 index : 7
enter element at 4 index : 9
Sorted even array : 1 3 9
Sorted odd array : 4 7

7
"""

def main():
    # Input the size of the matrix
    size = int(input("Enter the size of the array: "))

    # Input the elements of the matrix
    matrix = [int(input(f"Enter element at {i} index: ")) for i in range(size)]

    # Divide the matrix into even and odd submatrices
    even_matrix = matrix[::2]
    odd_matrix = matrix[1::2]

    # Sort the even and odd matrices in ascending order
    even_matrix.sort()
    odd_matrix.sort()

    # Print the sorted even and odd matrices
    print(f"Sorted even array: {' '.join(map(str, even_matrix))}")
    print(f"Sorted odd array: {' '.join(map(str, odd_matrix))}")

    # Calculate the sum of the second largest numbers from both matrices
    second_largest_even = even_matrix[-2] if len(even_matrix) >= 2 else 0
    second_largest_odd = odd_matrix[-2] if len(odd_matrix) >= 2 else 0

    # Print the sum of the second largest numbers
    print(f"Sum of the second largest numbers: {second_largest_even + second_largest_odd}")

if __name__ == "__main__":
    main()

class Solution:
    def process_matrix(self, size, elements):
        matrix = elements

        # Divide the matrix into even and odd submatrices
        even_matrix = matrix[::2]
        odd_matrix = matrix[1::2]

        # Sort the even and odd matrices in ascending order
        even_matrix.sort()
        odd_matrix.sort()

        # Calculate the sum of the second largest numbers from both matrices
        second_largest_even = even_matrix[-2] if len(even_matrix) >= 2 else 0
        second_largest_odd = odd_matrix[-2] if len(odd_matrix) >= 2 else 0

        return even_matrix, odd_matrix, second_largest_even, second_largest_odd

# Take input from the user
size = int(input("Enter the size of the array: "))
elements = [int(input(f"Enter element at {i} index: ")) for i in range(size)]

# Create an instance of the Solution class
solution_instance = Solution()

# Call the function and print the results
even_matrix, odd_matrix, second_largest_even, second_largest_odd = solution_instance.process_matrix(size, elements)
print(f"Sorted even array: {' '.join(map(str, even_matrix))}")
print(f"Sorted odd array: {' '.join(map(str, odd_matrix))}")
print(f"Sum of the second largest numbers: {second_largest_even + second_largest_odd}")

"""24-Instructions: You are required to write the code. You can click on compile and run anytime to check compilation/execution status. The code should be logically/syntactically correct.

Problem: Write a program in C to display the table of a number and print the sum of all the multiples in it.

Test Cases:

Test Case 1:
Input:
5
Expected Result Value:
5, 10, 15, 20, 25, 30, 35, 40, 45, 50
275

Test Case 2:
Input:
12
Expected Result Value:
12, 24, 36, 48, 60, 72, 84, 96, 108, 120
660
"""

def main():
    # Input a number
    num = int(input("Enter a number: "))

    # Display the table of the number
    print(f"Table of {num}: {', '.join(str(num * i) for i in range(1, 11))}")

    # Calculate and print the sum of all multiples
    multiples_sum = sum(num * i for i in range(1, 11))
    print(f"Sum of all multiples: {multiples_sum}")

if __name__ == "__main__":
    main()

class Solution:
    def generate_table_and_sum(self, num):
        # Display the table of the number
        table = [num * i for i in range(1, 11)]

        # Calculate the sum of all multiples
        multiples_sum = sum(table)

        return table, multiples_sum

# Take input from the user
num = int(input("Enter a number: "))

# Create an instance of the Solution class
solution_instance = Solution()

# Call the function and print the results
table, multiples_sum = solution_instance.generate_table_and_sum(num)
print(f"Table of {num}: {', '.join(map(str, table))}")
print(f"Sum of all multiples: {multiples_sum}")

"""25-nstructions: You are required to write the code. You can click on compile and run anytime to check compilation/execution status. The code should be logically/syntactically correct.

Question: Write a program in C such that it takes a lower limit and upper limit as inputs and print all the intermediate palindrome numbers.

Test Cases:

TestCase 1:
Input :
10 , 80
Expected Result:
11 , 22 , 33 , 44 , 55 , 66 , 77.

Test Case 2:
Input:
100,200
Expected Result:
101 , 111 , 121 , 131 , 141 , 151 , 161 , 171 , 181 , 191.
"""

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def find_palindromes(lower_limit, upper_limit):
    palindromes = [str(num) for num in range(lower_limit, upper_limit + 1) if is_palindrome(num)]
    return palindromes

def main():
    # Input lower and upper limits
    lower_limit = int(input("Enter the lower limit: "))
    upper_limit = int(input("Enter the upper limit: "))

    # Find and print palindrome numbers in the given range
    palindromes = find_palindromes(lower_limit, upper_limit)

    if palindromes:
        print("Palindrome numbers:", ', '.join(palindromes))
    else:
        print("No palindrome numbers found in the given range.")

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, lower_limit, upper_limit):
        self.lower_limit = lower_limit
        self.upper_limit = upper_limit

    def is_palindrome(self, num):
        return str(num) == str(num)[::-1]

    def find_palindromes(self):
        palindromes = [str(num) for num in range(self.lower_limit, self.upper_limit + 1) if self.is_palindrome(num)]
        return palindromes

    def display_palindromes(self):
        palindromes = self.find_palindromes()

        if palindromes:
            print("Palindrome numbers:", ', '.join(palindromes))
        else:
            print("No palindrome numbers found in the given range.")

def main():
    # Input lower and upper limits
    lower_limit = int(input("Enter the lower limit: "))
    upper_limit = int(input("Enter the upper limit: "))

    # Create an instance of Solution
    solution_instance = Solution(lower_limit, upper_limit)

    # Find and display palindrome numbers in the given range
    solution_instance.display_palindromes()

if __name__ == "__main__":
    main()

"""26-nstructions: You are required to write the code. You can click on compile & run anytime to check the compilation/ execution status of the program. The submitted code should be logically/syntactically correct and pass all the test cases.

Ques: The program is supposed to calculate the sum of  distance between three points from each other.

For
x1 = 1 y1 = 1
x2 = 2 y2 = 4
x3 = 3 y3 = 6

Distance is calculated as : sqrt(x2-x1)2 + (y2-y1)2
"""

import math

def calculate_distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

def main():
    # Input coordinates of three points
    x1, y1 = map(float, input("Enter coordinates of point 1 (x1 y1): ").split())
    x2, y2 = map(float, input("Enter coordinates of point 2 (x2 y2): ").split())
    x3, y3 = map(float, input("Enter coordinates of point 3 (x3 y3): ").split())

    # Calculate distances between points
    distance1 = calculate_distance(x1, y1, x2, y2)
    distance2 = calculate_distance(x2, y2, x3, y3)
    distance3 = calculate_distance(x3, y3, x1, y1)

    # Sum up the distances
    total_distance = distance1 + distance2 + distance3

    # Print the result
    print(f"Sum of distances between the three points: {total_distance}")

if __name__ == "__main__":
    main()

import math

class Solution:
    def __init__(self, x1, y1, x2, y2, x3, y3):
        self.point1 = (x1, y1)
        self.point2 = (x2, y2)
        self.point3 = (x3, y3)

    def calculate_distance(self, point1, point2):
        return math.sqrt((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2)

    def calculate_total_distance(self):
        distance1 = self.calculate_distance(self.point1, self.point2)
        distance2 = self.calculate_distance(self.point2, self.point3)
        distance3 = self.calculate_distance(self.point3, self.point1)

        total_distance = distance1 + distance2 + distance3
        return total_distance

def main():
    # Input coordinates of three points
    x1, y1 = map(float, input("Enter coordinates of point 1 (x1 y1): ").split())
    x2, y2 = map(float, input("Enter coordinates of point 2 (x2 y2): ").split())
    x3, y3 = map(float, input("Enter coordinates of point 3 (x3 y3): ").split())

    # Create an instance of Solution
    solution_instance = Solution(x1, y1, x2, y2, x3, y3)

    # Calculate and print the total distance
    total_distance = solution_instance.calculate_total_distance()
    print(f"Sum of distances between the three points: {total_distance}")

if __name__ == "__main__":
    main()

"""27-Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.



Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]


Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
"""

def two_sum(nums, target):
    num_dict = {}  # Dictionary to store the indices of numbers

    for i, num in enumerate(nums):
        complement = target - num

        if complement in num_dict:
            return [num_dict[complement], i]

        num_dict[num] = i

    return None  # If no solution is found

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (space-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Input target sum
    try:
        target = int(input("Enter the target sum: "))
    except ValueError:
        print("Invalid input. Please provide a valid integer for the target sum.")
        return

    # Find and print the indices of the two numbers
    result = two_sum(nums, target)

    if result:
        print(f"Input: nums = {nums}, target = {target}")
        print(f"Output: {result}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums, target):
        self.nums = nums
        self.target = target

    def two_sum(self):
        num_dict = {}  # Dictionary to store the indices of numbers

        for i, num in enumerate(self.nums):
            complement = self.target - num

            if complement in num_dict:
                return [num_dict[complement], i]

            num_dict[num] = i

        return None  # If no solution is found

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Input target sum
    try:
        target = int(input("Enter the target sum: "))
    except ValueError:
        print("Invalid input. Please provide a valid integer for the target sum.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(nums, target)

    # Find and print the indices of the two numbers
    result = solution_instance.two_sum()

    if result:
        print(f"Input: nums = {nums}, target = {target}")
        print(f"Output: {result}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()

"""28-Given an array of size n, write a program to check if it is sorted in ascending order or not. Equal values are allowed in an array and two consecutive equal values are considered sorted.

Examples:

Input : 20 21 45 89 89 90
Output : Yes

Input : 20 20 45 89 89 90
Output : Yes

Input : 20 20 78 98 99 97
Output : No
"""

def is_sorted(arr):
    n = len(arr)
    for i in range(1, n):
        if arr[i] < arr[i - 1]:
            return "No"
    return "Yes"

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Check if the array is sorted in ascending order
    result = is_sorted(arr)

    print(f"Output: {result}")

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, arr):
        self.arr = arr

    def is_sorted(self):
        n = len(self.arr)
        for i in range(1, n):
            if self.arr[i] < self.arr[i - 1]:
                return "No"
        return "Yes"

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(arr)

    # Check if the array is sorted in ascending order
    result = solution_instance.is_sorted()

    print(f"Output: {result}")

if __name__ == "__main__":
    main()

"""29-Given an array of integers, find the sum of its elements.

Examples:

Input : arr[] = {1, 2, 3}
Output : 6
Explanation: 1 + 2 + 3 = 6

Input : arr[] = {15, 12, 13, 10}
Output : 50
"""

def calculate_sum(arr):
    return sum(arr)

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Calculate and print the sum of the array elements
    result = calculate_sum(arr)

    print(f"Output: {result}")

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, arr):
        self.arr = arr

    def calculate_sum(self):
        return sum(self.arr)

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(arr)

    # Calculate and print the sum of the array elements
    result = solution_instance.calculate_sum()

    print(f"Output: {result}")

if __name__ == "__main__":
    main()

"""30-Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:




Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]


Constraints:

1 <= numRows <= 30
"""

def generate_pascals_triangle(numRows):
    triangle = []

    for i in range(numRows):
        row = [1] * (i + 1)
        for j in range(1, i):
            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
        triangle.append(row)

    return triangle

def main():
    # Input number of rows
    try:
        numRows = int(input("Enter the number of rows for Pascal's triangle: "))
    except ValueError:
        print("Invalid input. Please provide a valid integer.")
        return

    # Generate and print Pascal's triangle
    result = generate_pascals_triangle(numRows)

    print(f"Output: {result}")

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, numRows):
        self.numRows = numRows

    def generate_pascals_triangle(self):
        triangle = []

        for i in range(self.numRows):
            row = [1] * (i + 1)
            for j in range(1, i):
                row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
            triangle.append(row)

        return triangle

def main():
    # Input number of rows
    try:
        numRows = int(input("Enter the number of rows for Pascal's triangle: "))
    except ValueError:
        print("Invalid input. Please provide a valid integer.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(numRows)

    # Generate and print Pascal's triangle
    result = solution_instance.generate_pascals_triangle()

    print(f"Output: {result}")

if __name__ == "__main__":
    main()

"""31-Given an array which may contain duplicates, print all elements and their frequencies.

Examples:

Input :  arr[] = {10, 20, 20, 10, 10, 20, 5, 20}
Output : 10 3
         20 4
         5  1

Input : arr[] = {10, 20, 20}
Output : 10 1
         20 2
"""

from collections import Counter

def print_element_frequencies(arr):
    frequency_dict = Counter(arr)

    for element, frequency in frequency_dict.items():
        print(f"{element} {frequency}")

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Print elements and their frequencies
    print("Output:")
    print_element_frequencies(arr)

if __name__ == "__main__":
    main()

from collections import Counter

class Solution:
    def __init__(self, arr):
        self.arr = arr

    def print_element_frequencies(self):
        frequency_dict = Counter(self.arr)

        for element, frequency in frequency_dict.items():
            print(f"{element} {frequency}")

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(arr)

    # Print elements and their frequencies
    print("Output:")
    solution_instance.print_element_frequencies()

if __name__ == "__main__":
    main()

"""32-Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.



Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]


Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
"""

def move_zeros(nums):
    non_zero_index = 0

    # Traverse the array and move non-zeros to the front
    for i in range(len(nums)):
        if nums[i] != 0:
            nums[non_zero_index], nums[i] = nums[i], nums[non_zero_index]
            non_zero_index += 1

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Move zeros to the end in-place
    move_zeros(nums)

    # Print the result
    print(f"Output: {nums}")

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums):
        self.nums = nums

    def move_zeros(self):
        non_zero_index = 0

        # Traverse the array and move non-zeros to the front
        for i in range(len(self.nums)):
            if self.nums[i] != 0:
                self.nums[non_zero_index], self.nums[i] = self.nums[i], self.nums[non_zero_index]
                non_zero_index += 1

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(nums)

    # Move zeros to the end in-place
    solution_instance.move_zeros()

    # Print the result
    print(f"Output: {solution_instance.nums}")

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums):
        self.nums = nums

    def move_zeros(self):
        non_zero_index = 0

        # Traverse the array and move non-zeros to the front
        for i in range(len(self.nums)):
            if self.nums[i] != 0:
                self.nums[non_zero_index], self.nums[i] = self.nums[i], self.nums[non_zero_index]
                non_zero_index += 1

    def get_result(self):
        return self.nums

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(nums)

    # Move zeros to the end in-place
    solution_instance.move_zeros()

    # Print the result
    print(f"Output: {solution_instance.get_result()}")

if __name__ == "__main__":
    main()

"""33-Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.



Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true


Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
"""

def contains_duplicate(nums):
    num_set = set()

    for num in nums:
        if num in num_set:
            return True
        num_set.add(num)

    return False

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Check if the array contains duplicates
    result = contains_duplicate(nums)

    # Print the result
    print(f"Output: {result}")

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums):
        self.nums = nums

    def contains_duplicate(self):
        num_set = set()

        for num in self.nums:
            if num in num_set:
                return True
            num_set.add(num)

        return False

    def get_result(self):
        return self.contains_duplicate()

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(nums)

    # Check if the array contains duplicates
    result = solution_instance.get_result()

    # Print the result
    print(f"Output: {result}")

if __name__ == "__main__":
    main()

"""34-Given an array of n elements that contains elements from 0 to n-1, with any of these numbers appearing any number of times. Find these repeating numbers in O(n) and use only constant memory space.

Note: The repeating element should be printed only once.

Example:

Input: n=7 , array[]={1, 2, 3, 6, 3, 6, 1}
Output: 1, 3, 6
Explanation: The numbers 1 , 3 and 6 appears more than once in the array.
"""

def find_repeating_numbers(n, arr):
    repeating_numbers = []

    for i in range(n):
        if arr[abs(arr[i])] >= 0:
            arr[abs(arr[i])] = -arr[abs(arr[i])]
        else:
            repeating_numbers.append(str(abs(arr[i])))

    print(", ".join(repeating_numbers), end=" ")

def main():
    # Input n
    try:
        n = int(input("Enter the value of n: "))
    except ValueError:
        print("Invalid input. Please provide a valid integer for n.")
        return

    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Check and print repeating numbers
    print("Output:")
    find_repeating_numbers(n, arr)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, n, arr):
        self.n = n
        self.arr = arr
        self.repeating_numbers = []

    def find_repeating_numbers(self):
        for i in range(self.n):
            if self.arr[abs(self.arr[i])] >= 0:
                self.arr[abs(self.arr[i])] = -self.arr[abs(self.arr[i])]
            else:
                self.repeating_numbers.append(str(abs(self.arr[i])))

    def display_output(self):
        print("Output:", ", ".join(self.repeating_numbers))

def main():
    # Input n
    try:
        n = int(input("Enter the value of n: "))
    except ValueError:
        print("Invalid input. Please provide a valid integer for n.")
        return

    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(n, arr)

    # Find and display repeating numbers
    solution_instance.find_repeating_numbers()
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""35-Given an Array of size N and a values K, around which we need to right rotate the array. How to quickly print the right rotated array?
Examples :

Input: Array[] = {1, 3, 5, 7, 9}, K = 2.
Output: 7 9 1 3 5
Explanation:
After 1st rotation - {9, 1, 3, 5, 7}
After 2nd rotation - {7, 9, 1, 3, 5}
Input: Array[] = {1, 2, 3, 4, 5}, K = 4.
Output: 2 3 4 5 1      
"""

def right_rotate_array(arr, K):
    N = len(arr)
    K = K % N

    rotated_array = arr[-K:] + arr[:-K]

    print(" ".join(map(str, rotated_array)))

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Input K
    try:
        K = int(input("Enter the value of K: "))
    except ValueError:
        print("Invalid input. Please provide a valid integer for K.")
        return

    # Print the right rotated array
    print("Output:")
    right_rotate_array(arr, K)

if __name__ == "__main__":
    main()

class Solution:
    def right_rotate_array(self, arr, K):
        N = len(arr)
        K = K % N

        rotated_array = arr[-K:] + arr[:-K]

        return rotated_array

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Input K
    try:
        K = int(input("Enter the value of K: "))
    except ValueError:
        print("Invalid input. Please provide a valid integer for K.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution()

    # Get and print the right rotated array
    print("Output:")
    result = solution_instance.right_rotate_array(arr, K)
    print(" ".join(map(str, result)))

if __name__ == "__main__":
    main()

"""36-Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.



Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1


Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.
"""

def find_single_number(nums):
    result = 0

    for num in nums:
        result ^= num

    return result

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Find and print the single non-repeating number
    print("Output:")
    result = find_single_number(nums)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def find_single_number(self, nums):
        result = 0

        for num in nums:
            result ^= num

        return result

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide comma-separated integers.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution()

    # Find and print the single non-repeating number
    print("Output:")
    result = solution_instance.find_single_number(nums)
    print(result)

if __name__ == "__main__":
    main()

"""37-Given an unsorted array a[] of size N, the task is to find its mean and median.

Mean of an array = (sum of all elements) / (number of elements)

The median of a sorted array of size N is defined as the middle element when N is odd and average of middle two elements when N is even. Since the array is not sorted here, we sort the array first, then apply above formula.
"""

def calculate_mean_median(arr):
    n = len(arr)

    # Sort the array
    arr.sort()

    # Calculate mean
    mean = sum(arr) / n

    # Calculate median
    if n % 2 == 0:
        median = (arr[n // 2 - 1] + arr[n // 2]) / 2
    else:
        median = arr[n // 2]

    return mean, median

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Calculate mean and median
    mean, median = calculate_mean_median(arr)

    # Print the output
    print(f"Input: a[] = {arr}")
    print(f"Output: Mean = {mean}, Median = {median}")

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, arr):
        self.arr = arr
        self.mean = None
        self.median = None

    def calculate_mean_median(self):
        n = len(self.arr)

        # Sort the array
        self.arr.sort()

        # Calculate mean
        self.mean = sum(self.arr) / n

        # Calculate median
        if n % 2 == 0:
            self.median = (self.arr[n // 2 - 1] + self.arr[n // 2]) / 2
        else:
            self.median = self.arr[n // 2]

    def display_output(self):
        print(f"Input: a[] = {self.arr}")
        print(f"Output: Mean = {self.mean}, Median = {self.median}")

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of the Solution class
    solution_instance = Solution(arr)

    # Calculate and display mean and median
    solution_instance.calculate_mean_median()
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""Enter the array of integers (space-separated): 12 13 1 10 34 1
Output:
The smallest element is 1 and the second smallest element is 10
"""

def find_smallest_second_smallest(arr):
    if len(arr) < 2:
        print("Array should have at least two elements.")
        return

    smallest = float('inf')
    second_smallest = float('inf')

    for num in arr:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif num < second_smallest and num != smallest:
            second_smallest = num

    if second_smallest == float('inf'):
        print("There is no second smallest element.")
    else:
        print(f"The smallest element is {smallest} and the second smallest element is {second_smallest}")

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Find and print the smallest and second smallest elements
    print("Output:")
    find_smallest_second_smallest(arr)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, arr):
        self.arr = arr
        self.smallest = None
        self.second_smallest = None

    def find_smallest_second_smallest(self):
        if len(self.arr) < 2:
            return "Array should have at least two elements."

        self.smallest = float('inf')
        self.second_smallest = float('inf')

        for num in self.arr:
            if num < self.smallest:
                self.second_smallest = self.smallest
                self.smallest = num
            elif num < self.second_smallest and num != self.smallest:
                self.second_smallest = num

        if self.second_smallest == float('inf'):
            return "There is no second smallest element."
        else:
            return f"The smallest element is {self.smallest} and the second smallest element is {self.second_smallest}"

    def display_output(self):
        print("Output:")
        result = self.find_smallest_second_smallest()
        print(result)

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of Solution
    solution_instance = Solution(arr)

    # Find and display the smallest and second smallest elements
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""39-Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.



Example 1:

Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
Example 2:

Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.
Example 3:

Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.


Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
"""

def third_max(nums):
    nums = set(nums)

    if len(nums) < 3:
        return max(nums)

    nums.remove(max(nums))
    nums.remove(max(nums))

    return max(nums)

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Find and print the third distinct maximum number
    print("Output:")
    result = third_max(nums)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums):
        self.nums = nums
        self.third_max = None

    def find_third_max(self):
        nums_set = set(self.nums)

        if len(nums_set) < 3:
            self.third_max = max(nums_set)
        else:
            nums_set.remove(max(nums_set))
            nums_set.remove(max(nums_set))
            self.third_max = max(nums_set)

    def display_output(self):
        print("Output:")
        self.find_third_max()
        print(self.third_max)

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of Solution
    solution_instance = Solution(nums)

    # Find and display the third distinct maximum number
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""40-Print the elements of an array in the decreasing frequency if 2 numbers have the same frequency then print the one which came first

Examples:  

Input:  arr[] = {2, 5, 2, 8, 5, 6, 8, 8}
Output: arr[] = {8, 8, 8, 2, 2, 5, 5, 6}

Input: arr[] = {2, 5, 2, 6, -1, 9999999, 5, 8, 8, 8}
Output: arr[] = {8, 8, 8, 2, 2, 5, 5, 6, -1, 9999999}
"""

from collections import Counter

def print_decreasing_frequency(arr):
    frequency_dict = Counter(arr)

    # Sort the array based on frequency and order
    sorted_arr = sorted(arr, key=lambda x: (-frequency_dict[x], arr.index(x)))

    print("Output: {" + ", ".join(map(str, sorted_arr)) + "}")

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Print elements in decreasing frequency
    print_decreasing_frequency(arr)

if __name__ == "__main__":
    main()

from collections import Counter

class Solution:
    def __init__(self, arr):
        self.arr = arr
        self.sorted_arr = None

    def sort_decreasing_frequency(self):
        frequency_dict = Counter(self.arr)

        # Sort the array based on frequency and order
        self.sorted_arr = sorted(self.arr, key=lambda x: (-frequency_dict[x], self.arr.index(x)))

    def display_output(self):
        print("Output: {" + ", ".join(map(str, self.sorted_arr)) + "}")

def main():
    # Input array of integers
    try:
        arr = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of Solution
    solution_instance = Solution(arr)

    # Display the output
    solution_instance.sort_decreasing_frequency()
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""41-Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.



Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2


Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
"""

def majority_element(nums):
    candidate = None
    count = 0

    for num in nums:
        if count == 0:
            candidate = num

        count += 1 if num == candidate else -1

    return candidate

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Find and print the majority element
    print("Output:")
    result = majority_element(nums)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums):
        self.nums = nums
        self.majority_element = None

    def find_majority_element(self):
        candidate = None
        count = 0

        for num in self.nums:
            if count == 0:
                candidate = num

            count += 1 if num == candidate else -1

        self.majority_element = candidate

    def display_output(self):
        self.find_majority_element()
        print("Output:")
        print(self.majority_element)

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of Solution
    solution_instance = Solution(nums)

    # Display the output
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""42-The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.



Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.


Constraints:

1 <= nums1.length <= nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 104
All integers in nums1 and nums2 are unique.
All the integers of nums1 also appear in nums2.
"""

def next_greater_element(nums1, nums2):
    stack = []
    next_greater = {}
    result = []

    for num in nums2:
        while stack and num > stack[-1]:
            next_greater[stack.pop()] = num
        stack.append(num)

    for num in nums1:
        result.append(next_greater.get(num, -1))

    return result

def main():
    # Input arrays
    try:
        nums1 = list(map(int, input("Enter the nums1 array (space-separated): ").split()))
        nums2 = list(map(int, input("Enter the nums2 array (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Find and print the next greater elements
    print("Output:")
    result = next_greater_element(nums1, nums2)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums1, nums2):
        self.nums1 = nums1
        self.nums2 = nums2
        self.stack = []
        self.next_greater = {}
        self.result = []

    def find_next_greater_element(self):
        for num in self.nums2:
            while self.stack and num > self.stack[-1]:
                self.next_greater[self.stack.pop()] = num
            self.stack.append(num)

        for num in self.nums1:
            self.result.append(self.next_greater.get(num, -1))

    def display_output(self):
        print("Output:")
        print(self.result)

def main():
    # Input arrays
    try:
        nums1 = list(map(int, input("Enter the nums1 array (space-separated): ").split()))
        nums2 = list(map(int, input("Enter the nums2 array (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of Solution
    solution_instance = Solution(nums1, nums2)

    # Find and display the next greater elements
    solution_instance.find_next_greater_element()
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""43-Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.



Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.


Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000
"""

def intersection(nums1, nums2):
    set_nums1 = set(nums1)
    set_nums2 = set(nums2)

    result = list(set_nums1.intersection(set_nums2))

    return result

def main():
    # Input arrays
    try:
        nums1 = list(map(int, input("Enter the nums1 array (space-separated): ").split()))
        nums2 = list(map(int, input("Enter the nums2 array (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Find and print the intersection
    print("Output:")
    result = intersection(nums1, nums2)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums1, nums2):
        self.nums1 = nums1
        self.nums2 = nums2
        self.intersection_result = None

    def find_intersection(self):
        set_nums1 = set(self.nums1)
        set_nums2 = set(self.nums2)

        intersection_set = set_nums1.intersection(set_nums2)

        self.intersection_result = list(intersection_set)

    def display_output(self):
        self.find_intersection()
        print("Output:")
        print(self.intersection_result)

def main():
    # Input arrays
    try:
        nums1 = list(map(int, input("Enter the nums1 array (space-separated): ").split()))
        nums2 = list(map(int, input("Enter the nums2 array (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of Solution
    solution_instance = Solution(nums1, nums2)

    # Find and display the intersection
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""44-A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.



Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.


Constraints:

1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.
"""

def find_peak_element(nums):
    left, right = 0, len(nums) - 1

    while left < right:
        mid = (left + right) // 2

        if nums[mid] > nums[mid + 1]:
            right = mid
        else:
            left = mid + 1

    return left

def main():
    # Input array
    try:
        nums = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Find and print the peak element index
    print("Output:")
    result = find_peak_element(nums)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums):
        self.nums = nums
        self.peak_element_index = None

    def find_peak_element(self):
        left, right = 0, len(self.nums) - 1

        while left < right:
            mid = (left + right) // 2

            if self.nums[mid] > self.nums[mid + 1]:
                right = mid
            else:
                left = mid + 1

        self.peak_element_index = left

    def display_output(self):
        self.find_peak_element()
        print("Output:")
        print(self.peak_element_index)

def main():
    # Input array
    try:
        nums = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of Solution
    solution_instance = Solution(nums)

    # Find and display the peak element index
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""45-Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.

A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].



Example 1:

Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.
Example 2:

Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
increasing.


Constraints:

1 <= nums.length <= 104
-109 <= nums[i] <= 109
"""

def longest_increasing_subsequence(nums):
    if not nums:
        return 0

    max_length = 1
    current_length = 1

    for i in range(1, len(nums)):
        if nums[i] > nums[i - 1]:
            current_length += 1
        else:
            max_length = max(max_length, current_length)
            current_length = 1

    return max(max_length, current_length)

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Find and print the length of the longest continuous increasing subsequence
    print("Output:")
    result = longest_increasing_subsequence(nums)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, nums):
        self.nums = nums
        self.longest_increasing_subsequence_length = None

    def find_longest_increasing_subsequence(self):
        if not self.nums:
            return 0

        max_length = 1
        current_length = 1

        for i in range(1, len(self.nums)):
            if self.nums[i] > self.nums[i - 1]:
                current_length += 1
            else:
                max_length = max(max_length, current_length)
                current_length = 1

        self.longest_increasing_subsequence_length = max(max_length, current_length)

    def display_output(self):
        self.find_longest_increasing_subsequence()
        print("Output:")
        print(self.longest_increasing_subsequence_length)

def main():
    # Input array of integers
    try:
        nums = list(map(int, input("Enter the array of integers (space-separated): ").split()))
    except ValueError:
        print("Invalid input. Please provide space-separated integers.")
        return

    # Create an instance of Solution
    solution_instance = Solution(nums)

    # Find and display the length of the longest continuous increasing subsequence
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""46-Given a string S, check if it is palindrome or not.

Example 1:

Input: S = "abba"
Output: 1
Explanation: S is a palindrome
Example 2:

Input: S = "abc"
Output: 0
Explanation: S is not a palindrome
Your Task:
"""

def is_palindrome(s):
    # Remove non-alphanumeric characters and convert to lowercase
    cleaned_s = ''.join(char.lower() for char in s if char.isalnum())

    # Check if the cleaned string is a palindrome
    return cleaned_s == cleaned_s[::-1]

def main():
    # Input string
    s = input("Enter the string: ")

    # Check and print if the string is a palindrome
    print("Output:")
    result = is_palindrome(s)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, s):
        self.s = s
        self.is_palindrome_result = None

    def is_palindrome(self):
        # Remove non-alphanumeric characters and convert to lowercase
        cleaned_s = ''.join(char.lower() for char in self.s if char.isalnum())

        # Check if the cleaned string is a palindrome
        self.is_palindrome_result = cleaned_s == cleaned_s[::-1]

    def display_output(self):
        self.is_palindrome()
        print("Output:")
        print(self.is_palindrome_result)

def main():
    # Input string
    s = input("Enter the string: ")

    # Create an instance of Solution
    solution_instance = Solution(s)

    # Check and display if the string is a palindrome
    solution_instance.display_output()

if __name__ == "__main__":
    main()

"""47-Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.



Example 1:

Input: words = ["bella","label","roller"]
Output: ["e","l","l"]
Example 2:

Input: words = ["cool","lock","cook"]
Output: ["c","o"]


Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 100
words[i] consists of lowercase English letters.
"""

from collections import Counter

class CommonCharacterFinder:
    def __init__(self, words):
        self.words = words

    def find_common_characters(self):
        if not self.words:
            return []

        # Initialize the counter with the characters from the first word
        common_chars_counter = Counter(self.words[0])

        # Iterate through the rest of the words and update the counter
        for word in self.words[1:]:
            word_counter = Counter(word)
            common_chars_counter &= word_counter

        # Extract the common characters from the counter
        common_chars = []
        for char, count in common_chars_counter.items():
            common_chars.extend([char] * count)

        return common_chars

    def display_output(self):
        result = self.find_common_characters()
        print("Output:")
        print(result)

def main():
    # Input array of strings
    try:
        words = list(map(str, input("Enter the array of strings (comma-separated): ").split(',')))
    except ValueError:
        print("Invalid input. Please provide a comma-separated list of strings.")
        return

    # Create an instance of CommonCharacterFinder
    finder = CommonCharacterFinder(words)

    # Find and display the common characters
    finder.display_output()

if __name__ == "__main__":
    main()

from collections import Counter

class Solution:
    def __init__(self, words):
        self.words = words
        self.common_characters = None

    def find_common_characters(self):
        if not self.words:
            return []

        # Initialize the counter with the characters from the first word
        common_chars_counter = Counter(self.words[0])

        # Iterate through the rest of the words and update the counter
        for word in self.words[1:]:
            word_counter = Counter(word)
            common_chars_counter &= word_counter

        # Extract the common characters from the counter
        common_chars = []
        for char, count in common_chars_counter.items():
            common_chars.extend([char] * count)

        self.common_characters = common_chars

    def display_output(self):
        self.find_common_characters()
        print("Output:")
        print(self.common_characters)

    @staticmethod
    def main():
        # Input array of strings
        try:
            words = list(map(str, input("Enter the array of strings (comma-separated): ").split(',')))
        except ValueError:
            print("Invalid input. Please provide a comma-separated list of strings.")
            return

        # Create an instance of Solution
        solution_instance = Solution(words)

        # Find and display the common characters
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""48-Given two strings string1 and string2, remove those characters from the first string(string1) which are present in the second string(string2). Both strings are different and contain only lowercase characters.
NOTE: The size of the first string is always greater than the size of the second string( |string1| > |string2|).

Example:

Input:
string1 = “computer”
string2 = “cat”
Output: “ompuer”
Explanation: After removing characters(c, a, t)
from string1 we get “ompuer”.

Input:
string1 = “occurrence”
string2 = “car”
Output: “ouene”
"""

def remove_chars(string1, string2):
    # Convert string2 to a set for efficient membership check
    set_string2 = set(string2)

    # Remove characters from string1 that are present in string2
    result = ''.join(char for char in string1 if char not in set_string2)

    return result

def main():
    # Input strings
    try:
        string1 = input("Enter the first string: ")
        string2 = input("Enter the second string: ")
    except ValueError:
        print("Invalid input. Please provide valid strings.")
        return

    # Remove characters and print the result
    print("Output:")
    result = remove_chars(string1, string2)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, string1, string2):
        self.string1 = string1
        self.string2 = string2
        self.result = None

    def remove_chars(self):
        # Convert string2 to a set for efficient membership check
        set_string2 = set(self.string2)

        # Remove characters from string1 that are present in string2
        self.result = ''.join(char for char in self.string1 if char not in set_string2)

    def display_output(self):
        self.remove_chars()
        print("Output:")
        print(self.result)

    @staticmethod
    def main():
        # Input strings
        try:
            string1 = input("Enter the first string: ")
            string2 = input("Enter the second string: ")
        except ValueError:
            print("Invalid input. Please provide valid strings.")
            return

        # Create an instance of Solution
        solution_instance = Solution(string1, string2)

        # Remove characters and display the result
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""49-You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.



Example 1:

Input: s = "abbaca"
Output: "ca"
Explanation:
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".
Example 2:

Input: s = "azxxzy"
Output: "ay"


Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.
"""

class Solution:
    def __init__(self, s):
        self.s = s
        self.result = None

    def remove_duplicates(self):
        stack = []

        for char in self.s:
            if stack and stack[-1] == char:
                stack.pop()
            else:
                stack.append(char)

        self.result = ''.join(stack)

    def display_output(self):
        self.remove_duplicates()
        print(f"Input: s = \"{self.s}\"")
        print("Output:", f"\"{self.result}\"")

    @staticmethod
    def main():
        # Input string
        try:
            s = input("Enter the string: ")
        except ValueError:
            print("Invalid input. Please provide a valid string.")
            return

        # Create an instance of Solution
        solution_instance = Solution(s)

        # Remove duplicates and display the result
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

def remove_duplicates(s):
    stack = []

    for char in s:
        if stack and stack[-1] == char:
            stack.pop()
        else:
            stack.append(char)

    return ''.join(stack)

def main():
    # Input string
    try:
        s = input("Enter the string: ")
    except ValueError:
        print("Invalid input. Please provide a valid string.")
        return

    # Remove duplicates and display the result
    result = remove_duplicates(s)
    print(f"Input: s = \"{s}\"")
    print("Output:", f"\"{result}\"")

if __name__ == "__main__":
    main()

"""50-A sentence is a string of single-space separated words where each word consists only of lowercase letters.

A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.

Given two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.



Example 1:

Input: s1 = "this apple is sweet", s2 = "this apple is sour"
Output: ["sweet","sour"]
Example 2:

Input: s1 = "apple apple", s2 = "banana"
Output: ["banana"]


Constraints:

1 <= s1.length, s2.length <= 200
s1 and s2 consist of lowercase English letters and spaces.
s1 and s2 do not have leading or trailing spaces.
All the words in s1 and s2 are separated by a single space.
"""

def uncommon_words(s1, s2):
    words1 = s1.split()
    words2 = s2.split()

    word_count = {}

    for word in words1 + words2:
        word_count[word] = word_count.get(word, 0) + 1

    uncommon_words = [word for word, count in word_count.items() if count == 1]

    return uncommon_words

def main():
    # Input sentences
    try:
        s1 = input("Enter the first sentence: ")
        s2 = input("Enter the second sentence: ")
    except ValueError:
        print("Invalid input. Please provide valid sentences.")
        return

    # Find and print the uncommon words
    print("Output:")
    result = uncommon_words(s1, s2)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, s1, s2):
        self.s1 = s1
        self.s2 = s2
        self.result = None

    def find_uncommon_words(self):
        words1 = self.s1.split()
        words2 = self.s2.split()

        word_count = {}

        for word in words1 + words2:
            word_count[word] = word_count.get(word, 0) + 1

        uncommon_words = [word for word, count in word_count.items() if count == 1]

        self.result = uncommon_words

    def display_output(self):
        self.find_uncommon_words()
        print("Output:")
        print(self.result)

    @staticmethod
    def main():
        # Input sentences
        try:
            s1 = input("Enter the first sentence: ")
            s2 = input("Enter the second sentence: ")
        except ValueError:
            print("Invalid input. Please provide valid sentences.")
            return

        # Create an instance of Solution
        solution_instance = Solution(s1, s2)

        # Find and display the uncommon words
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""51-Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28
...


Example 1:

Input: columnTitle = "A"
Output: 1
Example 2:

Input: columnTitle = "AB"
Output: 28
Example 3:

Input: columnTitle = "ZY"
Output: 701


Constraints:

1 <= columnTitle.length <= 7
columnTitle consists only of uppercase English letters.
columnTitle is in the range ["A", "FXSHRXW"].
"""

def title_to_number(columnTitle):
    column_number = 0

    for char in columnTitle:
        column_number = column_number * 26 + ord(char) - ord('A') + 1

    return column_number

def main():
    # Input column title
    try:
        columnTitle = input("Enter the column title: ")
    except ValueError:
        print("Invalid input. Please provide a valid column title.")
        return

    # Convert and print the corresponding column number
    print("Output:")
    result = title_to_number(columnTitle)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, column_title):
        self.column_title = column_title
        self.result = None

    def title_to_number(self):
        column_number = 0

        for char in self.column_title:
            column_number = column_number * 26 + ord(char) - ord('A') + 1

        self.result = column_number

    def display_output(self):
        self.title_to_number()
        print("Output:")
        print(self.result)

    @staticmethod
    def main():
        # Input column title
        try:
            column_title = input("Enter the column title: ")
        except ValueError:
            print("Invalid input. Please provide a valid column title.")
            return

        # Create an instance of Solution
        solution_instance = Solution(column_title)

        # Convert and display the corresponding column number
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""52-Given string str containing only lowercase characters. The problem is to print the characters along with their frequency in the order of their occurrence and in the given format explained in the examples below.

Examples:

Input : str = "geeksforgeeks"
Output : g2 e4 k2 s2 f1 o1 r1

Input : str = "elephant"
Output : e2 l1 p1 h1 a1 n1 t1
"""

def print_character_frequency(s):
    frequency_dict = {}

    for char in s:
        frequency_dict[char] = frequency_dict.get(char, 0) + 1

    result = ''
    for char, count in frequency_dict.items():
        result += f"{char}{count} "

    return result.strip()

def main():
    # Input string
    try:
        s = input("Enter the string: ")
    except ValueError:
        print("Invalid input. Please provide a valid string.")
        return

    # Print characters along with their frequency
    print("Output:")
    result = print_character_frequency(s)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, s):
        self.s = s
        self.result = None

    def print_character_frequency(self):
        frequency_dict = {}

        for char in self.s:
            frequency_dict[char] = frequency_dict.get(char, 0) + 1

        result = ''
        for char, count in frequency_dict.items():
            result += f"{char}{count} "

        return result.strip()

    def display_output(self):
        self.result = self.print_character_frequency()
        print("Output:")
        print(self.result)

    @staticmethod
    def main():
        # Input string
        try:
            s = input("Enter the string: ")
        except ValueError:
            print("Invalid input. Please provide a valid string.")
            return

        # Create an instance of Solution
        solution_instance = Solution(s)

        # Print characters along with their frequency
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""53-Given a string of lowercase characters from ‘a’ – ‘z’. We need to write a program to print the characters of this string in sorted order.

Examples:

Input : bbccdefbbaa
Output : aabbbbccdef

Input : geeksforgeeks
Output : eeeefggkkorss
"""

def print_sorted_characters(s):
    sorted_string = ''.join(sorted(s))
    return sorted_string

def main():
    # Input string
    try:
        s = input("Enter the string: ")
    except ValueError:
        print("Invalid input. Please provide a valid string.")
        return

    # Print characters in sorted order
    print("Output:")
    result = print_sorted_characters(s)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, s):
        self.s = s
        self.result = None

    def print_sorted_characters(self):
        sorted_string = ''.join(sorted(self.s))
        return sorted_string

    def display_output(self):
        self.result = self.print_sorted_characters()
        print("Output:")
        print(self.result)

    @staticmethod
    def main():
        # Input string
        try:
            s = input("Enter the string: ")
        except ValueError:
            print("Invalid input. Please provide a valid string.")
            return

        # Create an instance of Solution
        solution_instance = Solution(s)

        # Print characters in sorted order
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""54-Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.



Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false


Constraints:

1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.
"""

def is_anagram(s, t):
    return sorted(s) == sorted(t)

def main():
    # Input strings
    try:
        s = input("Enter the first string: ")
        t = input("Enter the second string: ")
    except ValueError:
        print("Invalid input. Please provide valid strings.")
        return

    # Check if one string is an anagram of the other
    print("Output:")
    result = is_anagram(s, t)
    print(result)

if __name__ == "__main__":
    main()

class solution:
    def __init__(self, s, t):
        self.s = s
        self.t = t

    def is_anagram(self):
        return sorted(self.s) == sorted(self.t)

    def display_output(self):
        result = self.is_anagram()
        print("Output:")
        print(result)

class Solution:
    @staticmethod
    def main():
        # Input strings
        try:
            s = input("Enter the first string: ")
            t = input("Enter the second string: ")
        except ValueError:
            print("Invalid input. Please provide valid strings.")
            return

        # Create an instance of AnagramChecker
        checker = AnagramChecker(s, t)

        # Check if one string is an anagram of the other
        checker.display_output()

if __name__ == "__main__":
    Solution.main()

"""55-Given a string, convert the characters of the string into the opposite case,i.e. if a character is the lower case then convert it into upper case and vice-versa.

Examples:

Input : geeksForgEeks
Output : GEEKSfORGeEKS
Input : hello every one
Output : HELLO EVERY ONE

ASCII values  of alphabets: A – Z = 65 to 90, a – z = 97 to 122
"""

def convert_case(s):
    result = ''
    for char in s:
        if 'a' <= char <= 'z':
            result += chr(ord(char) - 32)
        elif 'A' <= char <= 'Z':
            result += chr(ord(char) + 32)
        else:
            result += char
    return result

def main():
    # Input string
    try:
        s = input("Enter the string: ")
    except ValueError:
        print("Invalid input. Please provide a valid string.")
        return

    # Convert characters to opposite case
    print("Output:")
    result = convert_case(s)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, s):
        self.s = s
        self.result = None

    def convert_case(self):
        result = ''
        for char in self.s:
            if 'a' <= char <= 'z':
                result += chr(ord(char) - 32)
            elif 'A' <= char <= 'Z':
                result += chr(ord(char) + 32)
            else:
                result += char
        return result

    def display_output(self):
        self.result = self.convert_case()
        print("Output:")
        print(self.result)

    @staticmethod
    def main():
        # Input string
        try:
            s = input("Enter the string: ")
        except ValueError:
            print("Invalid input. Please provide a valid string.")
            return

        # Create an instance of Solution
        solution_instance = Solution(s)

        # Convert characters to opposite case
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""56-Given a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.

Substrings that occur multiple times are counted the number of times they occur.



Example 1:

Input: s = "00110011"
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: "0011", "01", "1100", "10", "0011", and "01".
Notice that some of these substrings repeat and are counted the number of times they occur.
Also, "00110011" is not a valid substring because all the 0's (and 1's) are not grouped together.
Example 2:

Input: s = "10101"
Output: 4
Explanation: There are 4 substrings: "10", "01", "10", "01" that have equal number of consecutive 1's and 0's.


Constraints:

1 <= s.length <= 105
s[i] is either '0' or '1'.
"""

def count_binary_substrings(s):
    groups = [1]
    for i in range(1, len(s)):
        if s[i] == s[i-1]:
            groups[-1] += 1
        else:
            groups.append(1)

    count = 0
    for i in range(1, len(groups)):
        count += min(groups[i-1], groups[i])

    return count

def main():
    # Input binary string
    try:
        s = input("Enter the binary string: ")
    except ValueError:
        print("Invalid input. Please provide a valid binary string.")
        return

    # Count the number of non-empty substrings
    print("Output:")
    result = count_binary_substrings(s)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, s):
        self.s = s
        self.result = None

    def count_binary_substrings(self):
        groups = [1]
        for i in range(1, len(self.s)):
            if self.s[i] == self.s[i-1]:
                groups[-1] += 1
            else:
                groups.append(1)

        count = 0
        for i in range(1, len(groups)):
            count += min(groups[i-1], groups[i])

        return count

    def display_output(self):
        self.result = self.count_binary_substrings()
        print("Output:")
        print(self.result)

    @staticmethod
    def main():
        # Input binary string
        try:
            s = input("Enter the binary string: ")
        except ValueError:
            print("Invalid input. Please provide a valid binary string.")
            return

        # Create an instance of Solution
        solution_instance = Solution(s)

        # Count the number of non-empty substrings
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""57-Given two string S and Q. The task is to count the number of the common subsequence in S and T.

Examples:

Input : S = “ajblqcpdz”, T = “aefcnbtdi”
Output : 11
Common subsequences are : { “a”, “b”, “c”, “d”, “ab”, “bd”, “ad”, “ac”, “cd”, “abd”, “acd” }

Input : S = “a”, T = “ab”
Output : 1
"""

def CommonSubsequencesCount(s, t):
    n1 = len(s)
    n2 = len(t)
    dp = [[0 for i in range(n2 + 1)] for i in range(n1 + 1)]

    for i in range(1, n1 + 1):
        for j in range(1, n2 + 1):
            if s[i - 1] == t[j - 1]:
                dp[i][j] = (1 + dp[i][j - 1] + dp[i - 1][j])
            else:
                dp[i][j] = (dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1])

    return dp[n1][n2]

def main():
    try:
        s = input("Enter the first string: ")
        t = input("Enter the second string: ")
    except ValueError:
        print("Invalid input. Please provide valid strings.")
        return

    result = CommonSubsequencesCount(s, t)
    print("Output:")
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, s, t):
        self.s = s
        self.t = t
        self.dp = [[0 for _ in range(len(t) + 1)] for _ in range(len(s) + 1)]
        self.result = None

    def count_common_subsequences(self):
        for i in range(1, len(self.s) + 1):
            for j in range(1, len(self.t) + 1):
                if self.s[i - 1] == self.t[j - 1]:
                    self.dp[i][j] = 1 + self.dp[i][j - 1] + self.dp[i - 1][j]
                else:
                    self.dp[i][j] = self.dp[i][j - 1] + self.dp[i - 1][j] - self.dp[i - 1][j - 1]

        return self.dp[len(self.s)][len(self.t)]

    def display_output(self):
        self.result = self.count_common_subsequences()
        print("Output:")
        print(self.result)

    @staticmethod
    def main():
        try:
            s = input("Enter the first string: ")
            t = input("Enter the second string: ")
        except ValueError:
            print("Invalid input. Please provide valid strings.")
            return

        # Create an instance of Solution
        solution_instance = Solution(s, t)

        # Count the number of common subsequences
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""58-Let's define a function countUniqueChars(s) that returns the number of unique characters in s.

For example, calling countUniqueChars(s) if s = "LEETCODE" then "L", "T", "C", "O", "D" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.
Given a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.

Notice that some substrings can be repeated so in this case you have to count the repeated ones too.



Example 1:

Input: s = "ABC"
Output: 10
Explanation: All possible substrings are: "A","B","C","AB","BC" and "ABC".
Every substring is composed with only unique letters.
Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10
Example 2:

Input: s = "ABA"
Output: 8
Explanation: The same as example 1, except countUniqueChars("ABA") = 1.
Example 3:

Input: s = "LEETCODE"
Output: 92


Constraints:

1 <= s.length <= 105
s consists of uppercase English letters only.
"""

def count_unique_chars(s):
    unique_chars = set()
    count = 0

    for char in s:
        if char not in unique_chars:
            unique_chars.add(char)
            count += len(unique_chars)

    return count

def sum_of_unique_chars_substrings(s):
    result = 0

    for i in range(len(s)):
        result += count_unique_chars(s[i:])

    return result

def main():
    # Input string
    try:
        s = input("Enter the string: ")
    except ValueError:
        print("Invalid input. Please provide a valid string.")
        return

    # Calculate and print the result
    print("Output:")
    result = sum_of_unique_chars_substrings(s)
    print(result)

if __name__ == "__main__":
    main()

class Solution:
    def __init__(self, s):
        self.s = s
        self.result = None

    def count_unique_chars(self, substring):
        unique_chars = set()
        count = 0

        for char in substring:
            if char not in unique_chars:
                unique_chars.add(char)
                count += len(unique_chars)

        return count

    def sum_of_unique_chars_substrings(self):
        result = 0

        for i in range(len(self.s)):
            result += self.count_unique_chars(self.s[i:])

        return result

    def display_output(self):
        self.result = self.sum_of_unique_chars_substrings()
        print("Output:")
        print(self.result)

    @staticmethod
    def main():
        try:
            s = input("Enter the string: ")
        except ValueError:
            print("Invalid input. Please provide a valid string.")
            return

        # Create an instance of Solution
        solution_instance = Solution(s)

        # Calculate and print the result
        solution_instance.display_output()

if __name__ == "__main__":
    Solution.main()

"""59-You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.



Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"


Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
"""

def find_added_letter(s, t):
    # Initialize dictionaries to store character counts
    count_s = {}
    count_t = {}

    # Count characters in s
    for char in s:
        count_s[char] = count_s.get(char, 0) + 1

    # Count characters in t
    for char in t:
        count_t[char] = count_t.get(char, 0) + 1

    # Compare counts and find the added letter
    for char in count_t:
        if char not in count_s or count_t[char] > count_s[char]:
            return char

def main():
    # Input strings
    try:
        s = input("Enter string s: ")
        t = input("Enter string t: ")
    except ValueError:
        print("Invalid input. Please provide valid strings.")
        return

    # Find and print the added letter
    added_letter = find_added_letter(s, t)
    print("Output:")
    print(added_letter)

if __name__ == "__main__":
    main()

class Solution:
    @staticmethod
    def find_added_letter(s, t):
        # Initialize dictionaries to store character counts
        count_s = {}
        count_t = {}

        # Count characters in s
        for char in s:
            count_s[char] = count_s.get(char, 0) + 1

        # Count characters in t
        for char in t:
            count_t[char] = count_t.get(char, 0) + 1

        # Compare counts and find the added letter
        for char in count_t:
            if char not in count_s or count_t[char] > count_s[char]:
                return char

    @staticmethod
    def main():
        # Input strings
        try:
            s = input("Enter string s: ")
            t = input("Enter string t: ")
        except ValueError:
            print("Invalid input. Please provide valid strings.")
            return

        # Find and print the added letter
        added_letter = Solution.find_added_letter(s, t)
        print("Output:")
        print(added_letter)

if __name__ == "__main__":
    Solution.main()

"""60-Given a string S, the task is to print all the duplicate characters with their occurrences in the given string.

Example:

Input: S = “geeksforgeeks”
Output:

e, count = 4
g, count = 2
k, count = 2
s, count = 2
"""

def print_duplicate_characters(S):
    # Initialize a dictionary to store character counts
    char_count = {}

    # Count characters in the string
    for char in S:
        char_count[char] = char_count.get(char, 0) + 1

    # Print duplicate characters and their counts
    print("Output:")
    for char, count in char_count.items():
        if count > 1:
            print(f"{char}, count = {count}")

def main():
    # Input string
    try:
        S = input("Enter the string: ")
    except ValueError:
        print("Invalid input. Please provide a valid string.")
        return

    # Print duplicate characters and their counts
    print_duplicate_characters(S)

if __name__ == "__main__":
    main()

class Solution:
    @staticmethod
    def find_duplicate_characters(S):
        # Initialize a dictionary to store character counts
        char_count = {}

        # Count characters in the string
        for char in S:
            char_count[char] = char_count.get(char, 0) + 1

        # Return duplicate characters and their counts
        duplicate_chars = {char: count for char, count in char_count.items() if count > 1}
        return duplicate_chars

    @staticmethod
    def display_output(result):
        print("Output:")
        for char, count in result.items():
            print(f"{char}, count = {count}")

    @staticmethod
    def main():
        # Input string
        try:
            S = input("Enter the string: ")
        except ValueError:
            print("Invalid input. Please provide a valid string.")
            return

        # Find and display duplicate characters and their counts
        result = Solution.find_duplicate_characters(S)
        Solution.display_output(result)

if __name__ == "__main__":
    Solution.main()

"""61-Given a string and the task is to count vowels, consonant, digits and special character in string. Special character also contains the white space.
Examples:


Input : str = "geeks for geeks121"
Output : Vowels: 5
         Consonant: 8
         Digit: 3
         Special Character: 2

Input : str = " A1 B@ d  adc"
Output : Vowels: 2
         Consonant: 4
         Digit: 1
         Special Character: 6
"""

def count_characters(string):
    # Initialize counts
    vowels = consonants = digits = special_chars = 0

    # Define vowels
    vowel_set = set("aeiouAEIOU")

    # Count characters in the string
    for char in string:
        if char.isalpha():
            if char in vowel_set:
                vowels += 1
            else:
                consonants += 1
        elif char.isdigit():
            digits += 1
        else:
            special_chars += 1

    # Print counts
    print(f"Vowels: {vowels}")
    print(f"Consonants: {consonants}")
    print(f"Digits: {digits}")
    print(f"Special Characters: {special_chars}")

def main():
    # Input string
    try:
        input_string = input("Enter the string: ")
    except ValueError:
        print("Invalid input. Please provide a valid string.")
        return

    # Count characters
    count_characters(input_string)

if __name__ == "__main__":
    main()

class Solution:
    @staticmethod
    def count_characters(input_string):
        # Initialize counts
        vowels = consonants = digits = special_chars = 0

        # Define vowels
        vowel_set = set("aeiouAEIOU")

        # Count characters in the string
        for char in input_string:
            if char.isalpha():
                if char in vowel_set:
                    vowels += 1
                else:
                    consonants += 1
            elif char.isdigit():
                digits += 1
            else:
                special_chars += 1

        # Print counts
        print(f"Vowels: {vowels}")
        print(f"Consonants: {consonants}")
        print(f"Digits: {digits}")
        print(f"Special Characters: {special_chars}")

    @staticmethod
    def main():
        # Input string
        try:
            input_string = input("Enter the string: ")
        except ValueError:
            print("Invalid input. Please provide a valid string.")
            return

        # Count characters
        Solution.count_characters(input_string)

if __name__ == "__main__":
    Solution.main()

"""62-We define the usage of capitals in a word to be right when one of the following cases holds:

All letters in this word are capitals, like "USA".
All letters in this word are not capitals, like "leetcode".
Only the first letter in this word is capital, like "Google".
Given a string word, return true if the usage of capitals in it is right.



Example 1:

Input: word = "USA"
Output: true
Example 2:

Input: word = "FlaG"
Output: false


Constraints:

1 <= word.length <= 100
word consists of lowercase and uppercase English letters.
"""

def detect_capital_usage(word):
    return word.isupper() or word.islower() or (word[0].isupper() and word[1:].islower())

# Take input from the user
word = input("Enter a word: ")

# Check capital usage and print the result as "true" or "false"
result = detect_capital_usage(word)
print(str(result).lower())

class Solution:
    @staticmethod
    def detect_capital_usage(word):
        return word.isupper() or word.islower() or (word[0].isupper() and word[1:].islower())

    @staticmethod
    def main():
        # Take input from the user
        word = input("Enter a word: ")

        # Check capital usage and print the result as "true" or "false"
        result = Solution.detect_capital_usage(word)
        print(str(result).lower())

if __name__ == "__main__":
    Solution.main()

"""63-Given an integer n, return a string array answer (1-indexed) where:

answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.


Example 1:

Input: n = 3
Output: ["1","2","Fizz"]
Example 2:

Input: n = 5
Output: ["1","2","Fizz","4","Buzz"]
Example 3:

Input: n = 15
Output: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]


Constraints:

1 <= n <= 104.Write code in python and take input from the user   


"""

def fizz_buzz(n):
    result = []
    for i in range(1, n + 1):
        if i % 3 == 0 and i % 5 == 0:
            result.append("FizzBuzz")
        elif i % 3 == 0:
            result.append("Fizz")
        elif i % 5 == 0:
            result.append("Buzz")
        else:
            result.append(str(i))
    return result

# Take input from the user
n = int(input("Enter a positive integer (n): "))

# Get the FizzBuzz result and print it
result = fizz_buzz(n)
print(result)

class Solution:
    @staticmethod
    def fizz_buzz(n):
        result = []
        for i in range(1, n + 1):
            if i % 3 == 0 and i % 5 == 0:
                result.append("FizzBuzz")
            elif i % 3 == 0:
                result.append("Fizz")
            elif i % 5 == 0:
                result.append("Buzz")
            else:
                result.append(str(i))
        return result

    @staticmethod
    def main():
        # Take input from the user
        n = int(input("Enter a positive integer (n): "))

        # Get the FizzBuzz result and print it
        result = Solution.fizz_buzz(n)
        print(result)

if __name__ == "__main__":
    Solution.main()

"""64-Given two strings S1 and S2, The task is to find if S1 is a substring of S2. If yes, return the index of the first occurrence, else return -1.

Examples :

Input: S1 = “for”, S2= “geeksforgeeks”
Output: 5
Explanation: String “for” is present as a substring of s2.

Input: S1 = “practice”, S2= “geeksforgeeks”
Output: -1.
Explanation: There is no occurrence of “practice” in “geeksforgeeks”
"""

def find_substring_index(s1, s2):
    if s1 in s2:
        return s2.find(s1)
    else:
        return -1

# Take input from the user
s1 = input("Enter the first string (S1): ")
s2 = input("Enter the second string (S2): ")

# Find and print the index
result = find_substring_index(s1, s2)
print("Output:", result)

class Solution:
    @staticmethod
    def find_substring_index(s1, s2):
        if s1 in s2:
            return s2.find(s1)
        else:
            return -1

    @staticmethod
    def main():
        # Take input from the user
        s1 = input("Enter the first string (S1): ")
        s2 = input("Enter the second string (S2): ")

        # Find and print the index
        result = Solution.find_substring_index(s1, s2)
        print("Output:", result)

if __name__ == "__main__":
    Solution.main()

"""65-Given an octal number as input, we need to write a program to convert the given octal number into equivalent decimal number.

Examples:

Input : 67
Output: 55
Input : 512
Output: 330
Input : 123
Output: 83
"""

def octal_to_decimal(octal):
    decimal = 0
    base = 1

    while octal > 0:
        last_digit = octal % 10
        decimal += last_digit * base
        base *= 8
        octal //= 10

    return decimal

# Take input from the user
octal_number = int(input("Enter an octal number: "))

# Convert and print the equivalent decimal number
decimal_number = octal_to_decimal(octal_number)
print("Output:", decimal_number)

class Solution:
    @staticmethod
    def octal_to_decimal(octal):
        decimal = 0
        base = 1

        while octal > 0:
            last_digit = octal % 10
            decimal += last_digit * base
            base *= 8
            octal //= 10

        return decimal

    @staticmethod
    def main():
        # Take input from the user
        octal_number = int(input("Enter an octal number: "))

        # Convert and print the equivalent decimal number
        decimal_number = Solution.octal_to_decimal(octal_number)
        print("Output:", decimal_number)

if __name__ == "__main__":
    Solution.main()

"""66-Given a Binary Number B, find its decimal equivalent.


Example 1:

Input: B = 10001000
Output: 136
Example 2:

Input: B = 101100
Output: 44

"""

def binary_to_decimal(binary):
    decimal = 0
    base = 1

    while binary > 0:
        last_digit = binary % 10
        decimal += last_digit * base
        base *= 2
        binary //= 10

    return decimal

# Take input from the user
binary_number = int(input("Enter a binary number: "))

# Convert and print the equivalent decimal number
decimal_number = binary_to_decimal(binary_number)
print("Output:", decimal_number)

class Solution:
    @staticmethod
    def binary_to_decimal(binary):
        decimal = 0
        base = 1

        while binary > 0:
            last_digit = binary % 10
            decimal += last_digit * base
            base *= 2
            binary //= 10

        return decimal

    @staticmethod
    def main():
        # Take input from the user
        binary_number = int(input("Enter a binary number: "))

        # Convert and print the equivalent decimal number
        decimal_number = Solution.binary_to_decimal(binary_number)
        print("Output:", decimal_number)

if __name__ == "__main__":
    Solution.main()

"""67-Given a decimal number as input, we need to write a program to convert the given decimal number into an equivalent binary number.

Examples of Decimal to Binary:

Input : 7
Output : 111
Input : 10
Output : 1010
Input: 33
Output: 100001

"""

def decimal_to_binary(decimal):
    binary = bin(decimal).replace("0b", "")
    return binary

# Take input from the user
decimal_number = int(input("Enter a decimal number: "))

# Convert and print the equivalent binary number
binary_number = decimal_to_binary(decimal_number)
print("Output:", binary_number)

class Solution:
    @staticmethod
    def decimal_to_binary(decimal):
        binary = bin(decimal).replace("0b", "")
        return binary

    @staticmethod
    def main():
        # Take input from the user
        decimal_number = int(input("Enter a decimal number: "))

        # Convert and print the equivalent binary number
        binary_number = Solution.decimal_to_binary(decimal_number)
        print("Output:", binary_number)

if __name__ == "__main__":
    Solution.main()

"""68-Given a decimal number as input, we need to write a program to convert the given decimal number into an equivalent octal number. i.e convert the number with base value 10 to base value 8. The base value of a number system determines the number of digits used to represent a numeric value. For example, the binary number system uses two digits 0 and 1, the octal number system uses 8 digits from 0-7 and the decimal number system uses 10 digits 0-9 to represent any numeric value.

Examples:

Input : 16
Output: 20

Input : 10
Output: 12

Input : 33
Output: 41
"""

def decimal_to_octal(decimal):
    octal = oct(decimal).replace("0o", "")
    return octal

# Take input from the user
decimal_number = int(input("Enter a decimal number: "))

# Convert and print the equivalent octal number
octal_number = decimal_to_octal(decimal_number)
print("Output:", octal_number)

class Solution:
    @staticmethod
    def decimal_to_octal(decimal):
        octal = oct(decimal).replace("0o", "")
        return octal

    @staticmethod
    def main():
        # Take input from the user
        decimal_number = int(input("Enter a decimal number: "))

        # Convert and print the equivalent octal number
        octal_number = Solution.decimal_to_octal(decimal_number)
        print("Output:", octal_number)

if __name__ == "__main__":
    Solution.main()

"""69-Given a decimal number as input, we need to write a program to convert the given decimal number into an equivalent octal number. i.e convert the number with base value 10 to base value 8. The base value of a number system determines the number of digits used to represent a numeric value. For example, the binary number system uses two digits 0 and 1, the octal number system uses 8 digits from 0-7 and the decimal number system uses 10 digits 0-9 to represent any numeric value.

Examples:

Input : 16
Output: 20

Input : 10
Output: 12

Input : 33
Output: 41
Algorithm:  
Store the remainder when the number is divided by 8 in an array.
Divide the number by 8 now
Repeat the above two steps until the number is not equal to 0.
Print the array in reverse order now.
"""

def decimal_to_octal(decimal):
    octal = oct(decimal).replace("0o", "")
    return octal

# Take input from the user
decimal_number = int(input("Enter a decimal number: "))

# Convert and print the equivalent octal number
octal_number = decimal_to_octal(decimal_number)
print("Output:", octal_number)

class Solution:
    @staticmethod
    def decimal_to_octal(decimal):
        octal = oct(decimal).replace("0o", "")
        return octal

    @staticmethod
    def main():
        # Take input from the user
        decimal_number = int(input("Enter a decimal number: "))

        # Convert and print the equivalent octal number
        octal_number = Solution.decimal_to_octal(decimal_number)
        print("Output:", octal_number)

if __name__ == "__main__":
    Solution.main()